/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_proxy
// --extrinsic=*
// --steps=50
// --repeat=20
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
	// Storage: `Proxy::Proxies` (r:1 w:0)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn proxy(p: u32) -> Weight {
		// Minimum execution time: 14_420 nanoseconds.
		Weight::from_parts(15_418_162_u64, 0)
			// Standard Error: 1_493
			.saturating_add(Weight::from_parts(52_759_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:0)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	// Storage: `Proxy::Announcements` (r:1 w:1)
	// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn proxy_announced(a: u32, p: u32) -> Weight {
		// Minimum execution time: 40_980 nanoseconds.
		Weight::from_parts(41_638_401_u64, 0)
			// Standard Error: 3_086
			.saturating_add(Weight::from_parts(245_140_u64, 0).saturating_mul(a as u64))
			// Standard Error: 3_189
			.saturating_add(Weight::from_parts(25_934_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Proxy::Announcements` (r:1 w:1)
	// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn remove_announcement(a: u32, _p: u32) -> Weight {
		// Minimum execution time: 27_990 nanoseconds.
		Weight::from_parts(29_071_622_u64, 0)
			// Standard Error: 1_965
			.saturating_add(Weight::from_parts(242_429_u64, 0).saturating_mul(a as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Proxy::Announcements` (r:1 w:1)
	// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn reject_announcement(a: u32, _p: u32) -> Weight {
		// Minimum execution time: 27_850 nanoseconds.
		Weight::from_parts(29_053_163_u64, 0)
			// Standard Error: 2_326
			.saturating_add(Weight::from_parts(242_096_u64, 0).saturating_mul(a as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:0)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	// Storage: `Proxy::Announcements` (r:1 w:1)
	// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn announce(a: u32, p: u32) -> Weight {
		// Minimum execution time: 36_400 nanoseconds.
		Weight::from_parts(37_853_172_u64, 0)
			// Standard Error: 2_587
			.saturating_add(Weight::from_parts(220_065_u64, 0).saturating_mul(a as u64))
			// Standard Error: 2_673
			.saturating_add(Weight::from_parts(12_116_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:1)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn add_proxy(p: u32) -> Weight {
		// Minimum execution time: 26_160 nanoseconds.
		Weight::from_parts(27_263_429_u64, 0)
			// Standard Error: 1_674
			.saturating_add(Weight::from_parts(50_397_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:1)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxy(p: u32) -> Weight {
		// Minimum execution time: 26_280 nanoseconds.
		Weight::from_parts(27_272_248_u64, 0)
			// Standard Error: 1_850
			.saturating_add(Weight::from_parts(69_449_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:1)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxies(p: u32) -> Weight {
		// Minimum execution time: 23_790 nanoseconds.
		Weight::from_parts(24_803_519_u64, 0)
			// Standard Error: 1_675
			.saturating_add(Weight::from_parts(56_719_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:1)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn create_pure(p: u32) -> Weight {
		// Minimum execution time: 28_390 nanoseconds.
		Weight::from_parts(29_619_661_u64, 0)
			// Standard Error: 1_690
			.saturating_add(Weight::from_parts(34_138_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Proxy::Proxies` (r:1 w:1)
	// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 30]`.
	fn kill_pure(p: u32) -> Weight {
		// Minimum execution time: 25_129 nanoseconds.
		Weight::from_parts(26_611_517_u64, 0)
			// Standard Error: 1_861
			.saturating_add(Weight::from_parts(51_914_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
