/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_utility
// --extrinsic=*
// --steps=50
// --repeat=20
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::weights::Weight;

/// Weight functions for `pallet_utility`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
	/// The range of component `c` is `[0, 1000]`.
	fn batch(c: u32) -> Weight {
		// Minimum execution time: 5_769 nanoseconds.
		Weight::from_parts(11_269_091_u64, 0)
			// Standard Error: 1_093
			.saturating_add(Weight::from_parts(3_670_619_u64, 0).saturating_mul(c as u64))
	}
	fn as_derivative() -> Weight {
		// Minimum execution time: 5_420 nanoseconds.
		Weight::from_parts(5_580_000_u64, 0)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn batch_all(c: u32) -> Weight {
		// Minimum execution time: 5_540 nanoseconds.
		Weight::from_parts(11_361_025_u64, 0)
			// Standard Error: 961
			.saturating_add(Weight::from_parts(4_080_836_u64, 0).saturating_mul(c as u64))
	}
	fn dispatch_as() -> Weight {
		// Minimum execution time: 8_090 nanoseconds.
		Weight::from_parts(8_490_000_u64, 0)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn force_batch(c: u32) -> Weight {
		// Minimum execution time: 5_680 nanoseconds.
		Weight::from_parts(8_663_740_u64, 0)
			// Standard Error: 1_209
			.saturating_add(Weight::from_parts(3_678_759_u64, 0).saturating_mul(c as u64))
	}
}
