
//! Autogenerated weights for `pallet_xcm_benchmarks::generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `hounspc`, CPU: `Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet
// pallet_xcm_benchmarks::generic
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallet_xcm_benchmarks_generic.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_xcm_benchmarks::generic`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xcm_benchmarks::generic::WeightInfo for WeightInfo<T> {
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn query_holding() -> Weight {
		// Minimum execution time: 14_211 nanoseconds.
		Weight::from_ref_time(14_430_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn buy_execution() -> Weight {
		// Minimum execution time: 5_010 nanoseconds.
		Weight::from_ref_time(5_114_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn query_response() -> Weight {
		// Minimum execution time: 4_821 nanoseconds.
		Weight::from_ref_time(4_931_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn transact() -> Weight {
		// Minimum execution time: 16_978 nanoseconds.
		Weight::from_ref_time(17_432_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn refund_surplus() -> Weight {
		// Minimum execution time: 5_014 nanoseconds.
		Weight::from_ref_time(5_273_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn set_error_handler() -> Weight {
		// Minimum execution time: 4_749 nanoseconds.
		Weight::from_ref_time(4_919_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn set_appendix() -> Weight {
		// Minimum execution time: 4_751 nanoseconds.
		Weight::from_ref_time(4_955_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn clear_error() -> Weight {
		// Minimum execution time: 4_701 nanoseconds.
		Weight::from_ref_time(4_841_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn descend_origin() -> Weight {
		// Minimum execution time: 5_059 nanoseconds.
		Weight::from_ref_time(5_260_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn clear_origin() -> Weight {
		// Minimum execution time: 4_677 nanoseconds.
		Weight::from_ref_time(4_819_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn report_error() -> Weight {
		// Minimum execution time: 7_908 nanoseconds.
		Weight::from_ref_time(8_129_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: PolkadotXcm AssetTraps (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn claim_asset() -> Weight {
		// Minimum execution time: 18_863 nanoseconds.
		Weight::from_ref_time(19_295_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn trap() -> Weight {
		// Minimum execution time: 4_860 nanoseconds.
		Weight::from_ref_time(4_966_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: PolkadotXcm VersionNotifyTargets (r:1 w:1)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn subscribe_version() -> Weight {
		// Minimum execution time: 13_261 nanoseconds.
		Weight::from_ref_time(13_757_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Balances TotalIssuance (r:1 w:1)
	// Storage: PolkadotXcm VersionNotifyTargets (r:0 w:1)
	fn unsubscribe_version() -> Weight {
		// Minimum execution time: 6_649 nanoseconds.
		Weight::from_ref_time(6_883_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn initiate_reserve_withdraw() -> Weight {
		// Minimum execution time: 14_249 nanoseconds.
		Weight::from_ref_time(14_703_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
