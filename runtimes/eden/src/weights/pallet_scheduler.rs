/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_scheduler
// --extrinsic=*
// --steps=50
// --repeat=20
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_scheduler`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
	// Storage: `Scheduler::IncompleteSince` (r:1 w:1)
	// Proof: `Scheduler::IncompleteSince` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn service_agendas_base() -> Weight {
		// Minimum execution time: 1_350 nanoseconds.
		Weight::from_parts(1_520_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 50]`.
	fn service_agenda_base(s: u32) -> Weight {
		// Minimum execution time: 3_171 nanoseconds.
		Weight::from_parts(5_855_678_u64, 0)
			// Standard Error: 3_386
			.saturating_add(Weight::from_parts(531_691_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn service_task_base() -> Weight {
		// Minimum execution time: 3_420 nanoseconds.
		Weight::from_parts(3_570_000_u64, 0)
	}
	// Storage: `Preimage::PreimageFor` (r:1 w:1)
	// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	// Storage: `Preimage::StatusFor` (r:1 w:0)
	// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32) -> Weight {
		// Minimum execution time: 20_191 nanoseconds.
		Weight::from_parts(20_389_000_u64, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(986_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Scheduler::Lookup` (r:0 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn service_task_named() -> Weight {
		// Minimum execution time: 5_409 nanoseconds.
		Weight::from_parts(5_609_000_u64, 0).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn service_task_periodic() -> Weight {
		// Minimum execution time: 3_410 nanoseconds.
		Weight::from_parts(3_620_000_u64, 0)
	}
	fn execute_dispatch_signed() -> Weight {
		// Minimum execution time: 2_590 nanoseconds.
		Weight::from_parts(2_730_000_u64, 0)
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Minimum execution time: 2_520 nanoseconds.
		Weight::from_parts(2_620_000_u64, 0)
	}
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 49]`.
	fn schedule(s: u32) -> Weight {
		// Minimum execution time: 10_890 nanoseconds.
		Weight::from_parts(14_302_394_u64, 0)
			// Standard Error: 3_560
			.saturating_add(Weight::from_parts(552_608_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Lookup` (r:0 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 50]`.
	fn cancel(s: u32) -> Weight {
		// Minimum execution time: 18_230 nanoseconds.
		Weight::from_parts(16_988_503_u64, 0)
			// Standard Error: 5_136
			.saturating_add(Weight::from_parts(853_083_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 49]`.
	fn schedule_named(s: u32) -> Weight {
		// Minimum execution time: 15_300 nanoseconds.
		Weight::from_parts(19_455_070_u64, 0)
			// Standard Error: 3_534
			.saturating_add(Weight::from_parts(584_286_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 50]`.
	fn cancel_named(s: u32) -> Weight {
		// Minimum execution time: 20_830 nanoseconds.
		Weight::from_parts(20_435_669_u64, 0)
			// Standard Error: 4_882
			.saturating_add(Weight::from_parts(882_848_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 50]`.
	fn schedule_retry(s: u32) -> Weight {
		// Minimum execution time: 10_730 nanoseconds.
		Weight::from_parts(11_359_936_u64, 0)
			// Standard Error: 824
			.saturating_add(Weight::from_parts(36_315_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Scheduler::Agenda` (r:1 w:0)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	fn set_retry() -> Weight {
		// Minimum execution time: 29_780 nanoseconds.
		Weight::from_parts(30_910_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:0)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:0)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	fn set_retry_named() -> Weight {
		// Minimum execution time: 39_350 nanoseconds.
		Weight::from_parts(40_460_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Scheduler::Agenda` (r:1 w:0)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	fn cancel_retry() -> Weight {
		// Minimum execution time: 29_470 nanoseconds.
		Weight::from_parts(30_110_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:0)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:0)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Retries` (r:0 w:1)
	// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
	fn cancel_retry_named() -> Weight {
		// Minimum execution time: 35_810 nanoseconds.
		Weight::from_parts(37_030_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
