/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-08, STEPS: `8`, REPEAT: 11, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=8
// --repeat=11
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./runtimes/eden/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
	fn on_initialize_periodic_named_resolved(s: u32) -> Weight;
	fn on_initialize_named_resolved(s: u32) -> Weight;
	fn on_initialize_periodic_resolved(s: u32) -> Weight;
	fn on_initialize_resolved(s: u32) -> Weight;
	fn on_initialize_named_aborted(s: u32) -> Weight;
	fn on_initialize_aborted(s: u32) -> Weight;
	fn on_initialize_periodic_named(s: u32) -> Weight;
	fn on_initialize_periodic(s: u32) -> Weight;
	fn on_initialize_named(s: u32) -> Weight;
	fn on_initialize(s: u32) -> Weight;
	fn schedule(s: u32) -> Weight;
	fn cancel(s: u32) -> Weight;
	fn schedule_named(s: u32) -> Weight;
	fn cancel_named(s: u32) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_periodic_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(23_735_000_u64)
			// Standard Error: 218_000
			.saturating_add(Weight::from_ref_time(26_165_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(51_705_000_u64)
			// Standard Error: 251_000
			.saturating_add(Weight::from_ref_time(20_141_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic_resolved(s: u32) -> Weight {
		Weight::from_ref_time(20_378_000_u64)
			// Standard Error: 47_000
			.saturating_add(Weight::from_ref_time(21_120_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_resolved(s: u32) -> Weight {
		Weight::from_ref_time(19_152_000_u64)
			// Standard Error: 68_000
			.saturating_add(Weight::from_ref_time(18_028_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_aborted(s: u32) -> Weight {
		Weight::from_ref_time(13_804_000_u64)
			// Standard Error: 31_000
			.saturating_add(Weight::from_ref_time(7_163_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_aborted(s: u32) -> Weight {
		Weight::from_ref_time(12_469_000_u64)
			// Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(3_359_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn on_initialize_periodic_named(s: u32) -> Weight {
		Weight::from_ref_time(27_559_000_u64)
			// Standard Error: 152_000
			.saturating_add(Weight::from_ref_time(12_475_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic(s: u32) -> Weight {
		Weight::from_ref_time(22_276_000_u64)
			// Standard Error: 216_000
			.saturating_add(Weight::from_ref_time(8_610_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named(s: u32) -> Weight {
		Weight::from_ref_time(14_772_000_u64)
			// Standard Error: 103_000
			.saturating_add(Weight::from_ref_time(7_772_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize(s: u32) -> Weight {
		Weight::from_ref_time(43_285_000_u64)
			// Standard Error: 265_000
			.saturating_add(Weight::from_ref_time(5_807_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn schedule(s: u32) -> Weight {
		Weight::from_ref_time(22_315_000_u64)
			// Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(188_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel(s: u32) -> Weight {
		Weight::from_ref_time(22_970_000_u64)
			// Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(689_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn schedule_named(s: u32) -> Weight {
		Weight::from_ref_time(27_215_000_u64)
			// Standard Error: 17_000
			.saturating_add(Weight::from_ref_time(252_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_named(s: u32) -> Weight {
		Weight::from_ref_time(26_026_000_u64)
			// Standard Error: 14_000
			.saturating_add(Weight::from_ref_time(693_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_periodic_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(23_735_000_u64)
			// Standard Error: 218_000
			.saturating_add(Weight::from_ref_time(26_165_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(51_705_000_u64)
			// Standard Error: 251_000
			.saturating_add(Weight::from_ref_time(20_141_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic_resolved(s: u32) -> Weight {
		Weight::from_ref_time(20_378_000_u64)
			// Standard Error: 47_000
			.saturating_add(Weight::from_ref_time(21_120_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_resolved(s: u32) -> Weight {
		Weight::from_ref_time(19_152_000_u64)
			// Standard Error: 68_000
			.saturating_add(Weight::from_ref_time(18_028_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_aborted(s: u32) -> Weight {
		Weight::from_ref_time(13_804_000_u64)
			// Standard Error: 31_000
			.saturating_add(Weight::from_ref_time(7_163_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_aborted(s: u32) -> Weight {
		Weight::from_ref_time(12_469_000_u64)
			// Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(3_359_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn on_initialize_periodic_named(s: u32) -> Weight {
		Weight::from_ref_time(27_559_000_u64)
			// Standard Error: 152_000
			.saturating_add(Weight::from_ref_time(12_475_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic(s: u32) -> Weight {
		Weight::from_ref_time(22_276_000_u64)
			// Standard Error: 216_000
			.saturating_add(Weight::from_ref_time(8_610_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named(s: u32) -> Weight {
		Weight::from_ref_time(14_772_000_u64)
			// Standard Error: 103_000
			.saturating_add(Weight::from_ref_time(7_772_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	fn on_initialize(s: u32) -> Weight {
		Weight::from_ref_time(43_285_000_u64)
			// Standard Error: 265_000
			.saturating_add(Weight::from_ref_time(5_807_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn schedule(s: u32) -> Weight {
		Weight::from_ref_time(22_315_000_u64)
			// Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(188_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn cancel(s: u32) -> Weight {
		Weight::from_ref_time(22_970_000_u64)
			// Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(689_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn schedule_named(s: u32) -> Weight {
		Weight::from_ref_time(27_215_000_u64)
			// Standard Error: 17_000
			.saturating_add(Weight::from_ref_time(252_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn cancel_named(s: u32) -> Weight {
		Weight::from_ref_time(26_026_000_u64)
			// Standard Error: 14_000
			.saturating_add(Weight::from_ref_time(693_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
