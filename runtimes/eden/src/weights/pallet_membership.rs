/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-b606df9f`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_membership
// --extrinsic=*
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use core::marker::PhantomData;

/// Weight functions for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	// Storage: `TechnicalMembership::Members` (r:1 w:1)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 49]`.
	fn add_member(m: u32, ) -> Weight {
		// Minimum execution time: 16_170 nanoseconds.
		Weight::from_parts(17_080_856_u64, 0)
			// Standard Error: 934
			.saturating_add(Weight::from_parts(25_947_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalMembership::Members` (r:1 w:1)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalMembership::Prime` (r:1 w:0)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[2, 50]`.
	fn remove_member(m: u32, ) -> Weight {
		// Minimum execution time: 18_650 nanoseconds.
		Weight::from_parts(19_497_834_u64, 0)
			// Standard Error: 940
			.saturating_add(Weight::from_parts(18_044_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalMembership::Members` (r:1 w:1)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalMembership::Prime` (r:1 w:0)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[2, 50]`.
	fn swap_member(m: u32, ) -> Weight {
		// Minimum execution time: 18_590 nanoseconds.
		Weight::from_parts(19_475_856_u64, 0)
			// Standard Error: 1_178
			.saturating_add(Weight::from_parts(41_505_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalMembership::Members` (r:1 w:1)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalMembership::Prime` (r:1 w:0)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 50]`.
	fn reset_member(m: u32, ) -> Weight {
		// Minimum execution time: 18_320 nanoseconds.
		Weight::from_parts(19_961_293_u64, 0)
			// Standard Error: 1_788
			.saturating_add(Weight::from_parts(167_691_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalMembership::Members` (r:1 w:1)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalMembership::Prime` (r:1 w:1)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 50]`.
	fn change_key(m: u32, ) -> Weight {
		// Minimum execution time: 18_940 nanoseconds.
		Weight::from_parts(19_998_332_u64, 0)
			// Standard Error: 1_346
			.saturating_add(Weight::from_parts(43_986_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `TechnicalMembership::Members` (r:1 w:0)
	// Proof: `TechnicalMembership::Members` (`max_values`: Some(1), `max_size`: Some(1601), added: 2096, mode: `MaxEncodedLen`)
	// Storage: `TechnicalMembership::Prime` (r:0 w:1)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 50]`.
	fn set_prime(m: u32, ) -> Weight {
		// Minimum execution time: 8_500 nanoseconds.
		Weight::from_parts(9_176_308_u64, 0)
			// Standard Error: 597
			.saturating_add(Weight::from_parts(10_078_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `TechnicalMembership::Prime` (r:0 w:1)
	// Proof: `TechnicalMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 50]`.
	fn clear_prime(m: u32, ) -> Weight {
		// Minimum execution time: 3_489 nanoseconds.
		Weight::from_parts(3_796_667_u64, 0)
			// Standard Error: 367
			.saturating_add(Weight::from_parts(1_950_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
