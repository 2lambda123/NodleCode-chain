/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-09, STEPS: `8`, REPEAT: 11, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=8
// --repeat=11
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=runtimes/eden/src/weights

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32) -> Weight;
	fn on_initialize_per_queue_item(q: u32) -> Weight;
	fn reinstrument(c: u32) -> Weight;
	fn call_with_code_per_byte(c: u32) -> Weight;
	fn instantiate_with_code(c: u32, s: u32) -> Weight;
	fn instantiate(s: u32) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32) -> Weight;
	fn seal_is_contract(r: u32) -> Weight;
	fn seal_code_hash(r: u32) -> Weight;
	fn seal_own_code_hash(r: u32) -> Weight;
	fn seal_caller_is_origin(r: u32) -> Weight;
	fn seal_address(r: u32) -> Weight;
	fn seal_gas_left(r: u32) -> Weight;
	fn seal_balance(r: u32) -> Weight;
	fn seal_value_transferred(r: u32) -> Weight;
	fn seal_minimum_balance(r: u32) -> Weight;
	fn seal_block_number(r: u32) -> Weight;
	fn seal_now(r: u32) -> Weight;
	fn seal_weight_to_fee(r: u32) -> Weight;
	fn seal_gas(r: u32) -> Weight;
	fn seal_input(r: u32) -> Weight;
	fn seal_input_per_kb(n: u32) -> Weight;
	fn seal_return(r: u32) -> Weight;
	fn seal_return_per_kb(n: u32) -> Weight;
	fn seal_terminate(r: u32) -> Weight;
	fn seal_random(r: u32) -> Weight;
	fn seal_deposit_event(r: u32) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32) -> Weight;
	fn seal_debug_message(r: u32) -> Weight;
	fn seal_set_storage(r: u32) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32) -> Weight;
	fn seal_clear_storage(r: u32) -> Weight;
	fn seal_clear_storage_per_kb(n: u32) -> Weight;
	fn seal_get_storage(r: u32) -> Weight;
	fn seal_get_storage_per_kb(n: u32) -> Weight;
	fn seal_contains_storage(r: u32) -> Weight;
	fn seal_contains_storage_per_kb(n: u32) -> Weight;
	fn seal_take_storage(r: u32) -> Weight;
	fn seal_take_storage_per_kb(n: u32) -> Weight;
	fn seal_transfer(r: u32) -> Weight;
	fn seal_call(r: u32) -> Weight;
	fn seal_delegate_call(r: u32) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32) -> Weight;
	fn seal_instantiate(r: u32) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32) -> Weight;
	fn seal_hash_sha2_256(r: u32) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32) -> Weight;
	fn seal_hash_keccak_256(r: u32) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32) -> Weight;
	fn seal_hash_blake2_256(r: u32) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32) -> Weight;
	fn seal_hash_blake2_128(r: u32) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32) -> Weight;
	fn seal_ecdsa_recover(r: u32) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32) -> Weight;
	fn seal_set_code_hash(r: u32) -> Weight;
	fn instr_i64const(r: u32) -> Weight;
	fn instr_i64load(r: u32) -> Weight;
	fn instr_i64store(r: u32) -> Weight;
	fn instr_select(r: u32) -> Weight;
	fn instr_if(r: u32) -> Weight;
	fn instr_br(r: u32) -> Weight;
	fn instr_br_if(r: u32) -> Weight;
	fn instr_br_table(r: u32) -> Weight;
	fn instr_br_table_per_entry(e: u32) -> Weight;
	fn instr_call(r: u32) -> Weight;
	fn instr_call_indirect(r: u32) -> Weight;
	fn instr_call_indirect_per_param(p: u32) -> Weight;
	fn instr_local_get(r: u32) -> Weight;
	fn instr_local_set(r: u32) -> Weight;
	fn instr_local_tee(r: u32) -> Weight;
	fn instr_global_get(r: u32) -> Weight;
	fn instr_global_set(r: u32) -> Weight;
	fn instr_memory_current(r: u32) -> Weight;
	fn instr_memory_grow(r: u32) -> Weight;
	fn instr_i64clz(r: u32) -> Weight;
	fn instr_i64ctz(r: u32) -> Weight;
	fn instr_i64popcnt(r: u32) -> Weight;
	fn instr_i64eqz(r: u32) -> Weight;
	fn instr_i64extendsi32(r: u32) -> Weight;
	fn instr_i64extendui32(r: u32) -> Weight;
	fn instr_i32wrapi64(r: u32) -> Weight;
	fn instr_i64eq(r: u32) -> Weight;
	fn instr_i64ne(r: u32) -> Weight;
	fn instr_i64lts(r: u32) -> Weight;
	fn instr_i64ltu(r: u32) -> Weight;
	fn instr_i64gts(r: u32) -> Weight;
	fn instr_i64gtu(r: u32) -> Weight;
	fn instr_i64les(r: u32) -> Weight;
	fn instr_i64leu(r: u32) -> Weight;
	fn instr_i64ges(r: u32) -> Weight;
	fn instr_i64geu(r: u32) -> Weight;
	fn instr_i64add(r: u32) -> Weight;
	fn instr_i64sub(r: u32) -> Weight;
	fn instr_i64mul(r: u32) -> Weight;
	fn instr_i64divs(r: u32) -> Weight;
	fn instr_i64divu(r: u32) -> Weight;
	fn instr_i64rems(r: u32) -> Weight;
	fn instr_i64remu(r: u32) -> Weight;
	fn instr_i64and(r: u32) -> Weight;
	fn instr_i64or(r: u32) -> Weight;
	fn instr_i64xor(r: u32) -> Weight;
	fn instr_i64shl(r: u32) -> Weight;
	fn instr_i64shrs(r: u32) -> Weight;
	fn instr_i64shru(r: u32) -> Weight;
	fn instr_i64rotl(r: u32) -> Weight;
	fn instr_i64rotr(r: u32) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_process_deletion_queue_batch() -> Weight {
		Weight::from_ref_time(3_264_000_u64).saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_per_trie_key(k: u32) -> Weight {
		Weight::from_ref_time(18_452_000_u64)
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(868_000).saturating_mul(k as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k as u64)))
	}
	fn on_initialize_per_queue_item(q: u32) -> Weight {
		Weight::from_ref_time(17_850_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(1_366_000).saturating_mul(q as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn reinstrument(c: u32) -> Weight {
		Weight::from_ref_time(58_911_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(37_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn call_with_code_per_byte(c: u32) -> Weight {
		Weight::from_ref_time(249_129_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(41_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn instantiate_with_code(c: u32, s: u32) -> Weight {
		Weight::from_ref_time(343_157_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(91_000).saturating_mul(c as u64)) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	fn instantiate(s: u32) -> Weight {
		Weight::from_ref_time(214_708_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn call() -> Weight {
		Weight::from_ref_time(165_143_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn upload_code(c: u32) -> Weight {
		Weight::from_ref_time(7_662_000_u64)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(44_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn remove_code() -> Weight {
		Weight::from_ref_time(36_939_000_u64)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn set_code() -> Weight {
		Weight::from_ref_time(40_634_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn seal_caller(r: u32) -> Weight {
		Weight::from_ref_time(238_412_000_u64)
			// Standard Error: 237_000
			.saturating_add(Weight::from_ref_time(41_218_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_is_contract(r: u32) -> Weight {
		Weight::from_ref_time(232_854_000_u64)
			// Standard Error: 946_000
			.saturating_add(Weight::from_ref_time(223_968_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(219_612_000_u64)
			// Standard Error: 1_027_000
			.saturating_add(Weight::from_ref_time(288_827_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_own_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(234_491_000_u64)
			// Standard Error: 187_000
			.saturating_add(Weight::from_ref_time(46_151_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_caller_is_origin(r: u32) -> Weight {
		Weight::from_ref_time(230_853_000_u64)
			// Standard Error: 423_000
			.saturating_add(Weight::from_ref_time(12_379_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_address(r: u32) -> Weight {
		Weight::from_ref_time(262_200_000_u64)
			// Standard Error: 680_000
			.saturating_add(Weight::from_ref_time(41_097_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_gas_left(r: u32) -> Weight {
		Weight::from_ref_time(238_854_000_u64)
			// Standard Error: 352_000
			.saturating_add(Weight::from_ref_time(40_424_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_balance(r: u32) -> Weight {
		Weight::from_ref_time(244_375_000_u64)
			// Standard Error: 254_000
			.saturating_add(Weight::from_ref_time(141_275_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_value_transferred(r: u32) -> Weight {
		Weight::from_ref_time(228_935_000_u64)
			// Standard Error: 217_000
			.saturating_add(Weight::from_ref_time(41_275_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_minimum_balance(r: u32) -> Weight {
		Weight::from_ref_time(289_318_000_u64)
			// Standard Error: 6_072_000
			.saturating_add(Weight::from_ref_time(53_513_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_block_number(r: u32) -> Weight {
		Weight::from_ref_time(231_042_000_u64)
			// Standard Error: 257_000
			.saturating_add(Weight::from_ref_time(41_212_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_now(r: u32) -> Weight {
		Weight::from_ref_time(231_815_000_u64)
			// Standard Error: 204_000
			.saturating_add(Weight::from_ref_time(40_994_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_weight_to_fee(r: u32) -> Weight {
		Weight::from_ref_time(231_601_000_u64)
			// Standard Error: 196_000
			.saturating_add(Weight::from_ref_time(125_265_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_gas(r: u32) -> Weight {
		Weight::from_ref_time(168_422_000_u64)
			// Standard Error: 248_000
			.saturating_add(Weight::from_ref_time(19_666_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_input(r: u32) -> Weight {
		Weight::from_ref_time(233_805_000_u64)
			// Standard Error: 246_000
			.saturating_add(Weight::from_ref_time(36_829_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_input_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(292_077_000_u64)
			// Standard Error: 8_000
			.saturating_add(Weight::from_ref_time(7_414_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_return(r: u32) -> Weight {
		Weight::from_ref_time(218_373_000_u64)
			// Standard Error: 1_121_000
			.saturating_add(Weight::from_ref_time(1_119_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_return_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(221_246_000_u64)
			// Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(154_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_terminate(r: u32) -> Weight {
		Weight::from_ref_time(224_390_000_u64)
			// Standard Error: 986_000
			.saturating_add(Weight::from_ref_time(56_614_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(r as u64)))
	}
	fn seal_random(r: u32) -> Weight {
		Weight::from_ref_time(238_257_000_u64)
			// Standard Error: 600_000
			.saturating_add(Weight::from_ref_time(175_068_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_deposit_event(r: u32) -> Weight {
		Weight::from_ref_time(239_014_000_u64)
			// Standard Error: 691_000
			.saturating_add(Weight::from_ref_time(294_504_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32) -> Weight {
		Weight::from_ref_time(536_089_000_u64)
			// Standard Error: 1_264_000
			.saturating_add(Weight::from_ref_time(187_423_000).saturating_mul(t as u64)) // Standard Error: 330_000
			.saturating_add(Weight::from_ref_time(52_899_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(t as u64)))
	}
	fn seal_debug_message(r: u32) -> Weight {
		Weight::from_ref_time(204_147_000_u64)
			// Standard Error: 2_970_000
			.saturating_add(Weight::from_ref_time(31_860_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_set_storage(r: u32) -> Weight {
		Weight::from_ref_time(209_607_000_u64)
			// Standard Error: 1_431_000
			.saturating_add(Weight::from_ref_time(426_469_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_set_storage_per_new_kb(n: u32) -> Weight {
		Weight::from_ref_time(568_632_000_u64)
			// Standard Error: 4_069_000
			.saturating_add(Weight::from_ref_time(73_728_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(60_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(56_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_set_storage_per_old_kb(n: u32) -> Weight {
		Weight::from_ref_time(531_022_000_u64)
			// Standard Error: 2_986_000
			.saturating_add(Weight::from_ref_time(59_455_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(60_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(56_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_clear_storage(r: u32) -> Weight {
		Weight::from_ref_time(249_216_000_u64)
			// Standard Error: 892_000
			.saturating_add(Weight::from_ref_time(399_049_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_clear_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(577_943_000_u64)
			// Standard Error: 2_610_000
			.saturating_add(Weight::from_ref_time(46_675_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(60_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(56_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_get_storage(r: u32) -> Weight {
		Weight::from_ref_time(256_545_000_u64)
			// Standard Error: 4_293_000
			.saturating_add(Weight::from_ref_time(352_792_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_get_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(471_948_000_u64)
			// Standard Error: 3_015_000
			.saturating_add(Weight::from_ref_time(123_457_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(60_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_contains_storage(r: u32) -> Weight {
		Weight::from_ref_time(222_957_000_u64)
			// Standard Error: 573_000
			.saturating_add(Weight::from_ref_time(326_267_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_contains_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(452_524_000_u64)
			// Standard Error: 3_016_000
			.saturating_add(Weight::from_ref_time(52_599_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(59_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_take_storage(r: u32) -> Weight {
		Weight::from_ref_time(253_714_000_u64)
			// Standard Error: 2_210_000
			.saturating_add(Weight::from_ref_time(436_359_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_take_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(537_220_000_u64)
			// Standard Error: 3_988_000
			.saturating_add(Weight::from_ref_time(128_587_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(60_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(56_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_transfer(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 12_287_000
			.saturating_add(Weight::from_ref_time(1_711_389_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_call(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 72_196_000
			.saturating_add(Weight::from_ref_time(16_135_614_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((160_u64).saturating_mul(r as u64)))
	}
	fn seal_delegate_call(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 38_740_000
			.saturating_add(Weight::from_ref_time(15_946_548_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads((157_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes((78_u64).saturating_mul(r as u64)))
	}
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32) -> Weight {
		Weight::from_ref_time(10_440_479_000_u64)
			// Standard Error: 66_761_000
			.saturating_add(Weight::from_ref_time(1_409_870_000).saturating_mul(t as u64)) // Standard Error: 91_000
			.saturating_add(Weight::from_ref_time(7_889_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(171_u64))
			.saturating_add(T::DbWeight::get().reads((81_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(165_u64))
			.saturating_add(T::DbWeight::get().writes((81_u64).saturating_mul(t as u64)))
	}
	fn seal_instantiate(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 224_319_000
			.saturating_add(Weight::from_ref_time(21_944_241_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((400_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((400_u64).saturating_mul(r as u64)))
	}
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32) -> Weight {
		Weight::from_ref_time(9_043_241_000_u64)
			// Standard Error: 657_371_000
			.saturating_add(Weight::from_ref_time(3_580_908_000).saturating_mul(t as u64)) // Standard Error: 957_000
			.saturating_add(Weight::from_ref_time(108_243_000).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(253_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(249_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t as u64)))
	}
	fn seal_hash_sha2_256(r: u32) -> Weight {
		Weight::from_ref_time(240_103_000_u64)
			// Standard Error: 410_000
			.saturating_add(Weight::from_ref_time(42_464_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_sha2_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(84_225_000_u64)
			// Standard Error: 457_000
			.saturating_add(Weight::from_ref_time(56_765_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_keccak_256(r: u32) -> Weight {
		Weight::from_ref_time(253_941_000_u64)
			// Standard Error: 533_000
			.saturating_add(Weight::from_ref_time(65_491_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_keccak_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 564_000
			.saturating_add(Weight::from_ref_time(190_464_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_256(r: u32) -> Weight {
		Weight::from_ref_time(230_675_000_u64)
			// Standard Error: 264_000
			.saturating_add(Weight::from_ref_time(49_693_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 787_000
			.saturating_add(Weight::from_ref_time(93_395_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_128(r: u32) -> Weight {
		Weight::from_ref_time(221_471_000_u64)
			// Standard Error: 383_000
			.saturating_add(Weight::from_ref_time(50_140_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_128_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(349_943_000_u64)
			// Standard Error: 1_152_000
			.saturating_add(Weight::from_ref_time(89_366_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_ecdsa_recover(r: u32) -> Weight {
		Weight::from_ref_time(48_735_000_u64)
			// Standard Error: 16_940_000
			.saturating_add(Weight::from_ref_time(2_574_428_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_ecdsa_to_eth_address(r: u32) -> Weight {
		Weight::from_ref_time(238_534_000_u64)
			// Standard Error: 9_940_000
			.saturating_add(Weight::from_ref_time(1_896_551_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn seal_set_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 15_908_000
			.saturating_add(Weight::from_ref_time(1_292_212_000).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads((157_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes((157_u64).saturating_mul(r as u64)))
	}
	fn instr_i64const(r: u32) -> Weight {
		Weight::from_ref_time(61_320_000_u64)
			// Standard Error: 25_000
			.saturating_add(Weight::from_ref_time(857_000).saturating_mul(r as u64))
	}
	fn instr_i64load(r: u32) -> Weight {
		Weight::from_ref_time(80_697_000_u64)
			// Standard Error: 377_000
			.saturating_add(Weight::from_ref_time(2_300_000).saturating_mul(r as u64))
	}
	fn instr_i64store(r: u32) -> Weight {
		Weight::from_ref_time(67_232_000_u64)
			// Standard Error: 238_000
			.saturating_add(Weight::from_ref_time(2_437_000).saturating_mul(r as u64))
	}
	fn instr_select(r: u32) -> Weight {
		Weight::from_ref_time(63_646_000_u64)
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(2_180_000).saturating_mul(r as u64))
	}
	fn instr_if(r: u32) -> Weight {
		Weight::from_ref_time(74_111_000_u64)
			// Standard Error: 255_000
			.saturating_add(Weight::from_ref_time(2_382_000).saturating_mul(r as u64))
	}
	fn instr_br(r: u32) -> Weight {
		Weight::from_ref_time(69_345_000_u64)
			// Standard Error: 136_000
			.saturating_add(Weight::from_ref_time(1_143_000).saturating_mul(r as u64))
	}
	fn instr_br_if(r: u32) -> Weight {
		Weight::from_ref_time(64_309_000_u64)
			// Standard Error: 59_000
			.saturating_add(Weight::from_ref_time(1_769_000).saturating_mul(r as u64))
	}
	fn instr_br_table(r: u32) -> Weight {
		Weight::from_ref_time(67_983_000_u64)
			// Standard Error: 127_000
			.saturating_add(Weight::from_ref_time(2_069_000).saturating_mul(r as u64))
	}
	fn instr_br_table_per_entry(_e: u32) -> Weight {
		Weight::from_ref_time(69_705_000_u64)
	}
	fn instr_call(r: u32) -> Weight {
		Weight::from_ref_time(53_985_000_u64)
			// Standard Error: 498_000
			.saturating_add(Weight::from_ref_time(8_367_000).saturating_mul(r as u64))
	}
	fn instr_call_indirect(r: u32) -> Weight {
		Weight::from_ref_time(75_090_000_u64)
			// Standard Error: 110_000
			.saturating_add(Weight::from_ref_time(7_960_000).saturating_mul(r as u64))
	}
	fn instr_call_indirect_per_param(p: u32) -> Weight {
		Weight::from_ref_time(119_403_000_u64)
			// Standard Error: 157_000
			.saturating_add(Weight::from_ref_time(242_000).saturating_mul(p as u64))
	}
	fn instr_local_get(r: u32) -> Weight {
		Weight::from_ref_time(63_097_000_u64)
			// Standard Error: 70_000
			.saturating_add(Weight::from_ref_time(1_030_000).saturating_mul(r as u64))
	}
	fn instr_local_set(_r: u32) -> Weight {
		Weight::from_ref_time(141_077_000_u64)
	}
	fn instr_local_tee(r: u32) -> Weight {
		Weight::from_ref_time(64_216_000_u64)
			// Standard Error: 301_000
			.saturating_add(Weight::from_ref_time(2_049_000).saturating_mul(r as u64))
	}
	fn instr_global_get(r: u32) -> Weight {
		Weight::from_ref_time(68_546_000_u64)
			// Standard Error: 92_000
			.saturating_add(Weight::from_ref_time(1_571_000).saturating_mul(r as u64))
	}
	fn instr_global_set(r: u32) -> Weight {
		Weight::from_ref_time(75_561_000_u64)
			// Standard Error: 132_000
			.saturating_add(Weight::from_ref_time(1_248_000).saturating_mul(r as u64))
	}
	fn instr_memory_current(r: u32) -> Weight {
		Weight::from_ref_time(65_243_000_u64)
			// Standard Error: 147_000
			.saturating_add(Weight::from_ref_time(908_000).saturating_mul(r as u64))
	}
	fn instr_memory_grow(r: u32) -> Weight {
		Weight::from_ref_time(60_606_000_u64)
			// Standard Error: 512_000
			.saturating_add(Weight::from_ref_time(149_675_000).saturating_mul(r as u64))
	}
	fn instr_i64clz(r: u32) -> Weight {
		Weight::from_ref_time(67_988_000_u64)
			// Standard Error: 160_000
			.saturating_add(Weight::from_ref_time(1_319_000).saturating_mul(r as u64))
	}
	fn instr_i64ctz(r: u32) -> Weight {
		Weight::from_ref_time(60_810_000_u64)
			// Standard Error: 165_000
			.saturating_add(Weight::from_ref_time(1_528_000).saturating_mul(r as u64))
	}
	fn instr_i64popcnt(r: u32) -> Weight {
		Weight::from_ref_time(61_252_000_u64)
			// Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(1_263_000).saturating_mul(r as u64))
	}
	fn instr_i64eqz(r: u32) -> Weight {
		Weight::from_ref_time(81_604_000_u64)
			// Standard Error: 182_000
			.saturating_add(Weight::from_ref_time(832_000).saturating_mul(r as u64))
	}
	fn instr_i64extendsi32(r: u32) -> Weight {
		Weight::from_ref_time(68_403_000_u64)
			// Standard Error: 89_000
			.saturating_add(Weight::from_ref_time(1_097_000).saturating_mul(r as u64))
	}
	fn instr_i64extendui32(r: u32) -> Weight {
		Weight::from_ref_time(61_513_000_u64)
			// Standard Error: 26_000
			.saturating_add(Weight::from_ref_time(1_273_000).saturating_mul(r as u64))
	}
	fn instr_i32wrapi64(r: u32) -> Weight {
		Weight::from_ref_time(60_171_000_u64)
			// Standard Error: 149_000
			.saturating_add(Weight::from_ref_time(1_577_000).saturating_mul(r as u64))
	}
	fn instr_i64eq(r: u32) -> Weight {
		Weight::from_ref_time(64_724_000_u64)
			// Standard Error: 72_000
			.saturating_add(Weight::from_ref_time(1_734_000).saturating_mul(r as u64))
	}
	fn instr_i64ne(r: u32) -> Weight {
		Weight::from_ref_time(66_128_000_u64)
			// Standard Error: 108_000
			.saturating_add(Weight::from_ref_time(1_702_000).saturating_mul(r as u64))
	}
	fn instr_i64lts(r: u32) -> Weight {
		Weight::from_ref_time(72_686_000_u64)
			// Standard Error: 125_000
			.saturating_add(Weight::from_ref_time(1_462_000).saturating_mul(r as u64))
	}
	fn instr_i64ltu(r: u32) -> Weight {
		Weight::from_ref_time(64_422_000_u64)
			// Standard Error: 61_000
			.saturating_add(Weight::from_ref_time(1_679_000).saturating_mul(r as u64))
	}
	fn instr_i64gts(r: u32) -> Weight {
		Weight::from_ref_time(63_328_000_u64)
			// Standard Error: 56_000
			.saturating_add(Weight::from_ref_time(1_686_000).saturating_mul(r as u64))
	}
	fn instr_i64gtu(r: u32) -> Weight {
		Weight::from_ref_time(62_291_000_u64)
			// Standard Error: 219_000
			.saturating_add(Weight::from_ref_time(2_060_000).saturating_mul(r as u64))
	}
	fn instr_i64les(r: u32) -> Weight {
		Weight::from_ref_time(56_760_000_u64)
			// Standard Error: 98_000
			.saturating_add(Weight::from_ref_time(2_187_000).saturating_mul(r as u64))
	}
	fn instr_i64leu(r: u32) -> Weight {
		Weight::from_ref_time(66_929_000_u64)
			// Standard Error: 121_000
			.saturating_add(Weight::from_ref_time(1_675_000).saturating_mul(r as u64))
	}
	fn instr_i64ges(r: u32) -> Weight {
		Weight::from_ref_time(64_576_000_u64)
			// Standard Error: 180_000
			.saturating_add(Weight::from_ref_time(2_056_000).saturating_mul(r as u64))
	}
	fn instr_i64geu(r: u32) -> Weight {
		Weight::from_ref_time(61_723_000_u64)
			// Standard Error: 25_000
			.saturating_add(Weight::from_ref_time(1_755_000).saturating_mul(r as u64))
	}
	fn instr_i64add(r: u32) -> Weight {
		Weight::from_ref_time(93_317_000_u64)
			// Standard Error: 425_000
			.saturating_add(Weight::from_ref_time(1_215_000).saturating_mul(r as u64))
	}
	fn instr_i64sub(r: u32) -> Weight {
		Weight::from_ref_time(78_930_000_u64)
			// Standard Error: 225_000
			.saturating_add(Weight::from_ref_time(1_389_000).saturating_mul(r as u64))
	}
	fn instr_i64mul(r: u32) -> Weight {
		Weight::from_ref_time(76_127_000_u64)
			// Standard Error: 154_000
			.saturating_add(Weight::from_ref_time(1_336_000).saturating_mul(r as u64))
	}
	fn instr_i64divs(r: u32) -> Weight {
		Weight::from_ref_time(66_724_000_u64)
			// Standard Error: 137_000
			.saturating_add(Weight::from_ref_time(1_892_000).saturating_mul(r as u64))
	}
	fn instr_i64divu(r: u32) -> Weight {
		Weight::from_ref_time(62_385_000_u64)
			// Standard Error: 50_000
			.saturating_add(Weight::from_ref_time(1_795_000).saturating_mul(r as u64))
	}
	fn instr_i64rems(r: u32) -> Weight {
		Weight::from_ref_time(58_318_000_u64)
			// Standard Error: 170_000
			.saturating_add(Weight::from_ref_time(2_213_000).saturating_mul(r as u64))
	}
	fn instr_i64remu(r: u32) -> Weight {
		Weight::from_ref_time(62_575_000_u64)
			// Standard Error: 89_000
			.saturating_add(Weight::from_ref_time(2_053_000).saturating_mul(r as u64))
	}
	fn instr_i64and(r: u32) -> Weight {
		Weight::from_ref_time(72_307_000_u64)
			// Standard Error: 267_000
			.saturating_add(Weight::from_ref_time(1_674_000).saturating_mul(r as u64))
	}
	fn instr_i64or(r: u32) -> Weight {
		Weight::from_ref_time(60_436_000_u64)
			// Standard Error: 191_000
			.saturating_add(Weight::from_ref_time(2_113_000).saturating_mul(r as u64))
	}
	fn instr_i64xor(r: u32) -> Weight {
		Weight::from_ref_time(68_908_000_u64)
			// Standard Error: 159_000
			.saturating_add(Weight::from_ref_time(1_592_000).saturating_mul(r as u64))
	}
	fn instr_i64shl(r: u32) -> Weight {
		Weight::from_ref_time(61_893_000_u64)
			// Standard Error: 107_000
			.saturating_add(Weight::from_ref_time(1_844_000).saturating_mul(r as u64))
	}
	fn instr_i64shrs(r: u32) -> Weight {
		Weight::from_ref_time(67_543_000_u64)
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(1_594_000).saturating_mul(r as u64))
	}
	fn instr_i64shru(r: u32) -> Weight {
		Weight::from_ref_time(65_365_000_u64)
			// Standard Error: 90_000
			.saturating_add(Weight::from_ref_time(1_758_000).saturating_mul(r as u64))
	}
	fn instr_i64rotl(r: u32) -> Weight {
		Weight::from_ref_time(72_029_000_u64)
			// Standard Error: 218_000
			.saturating_add(Weight::from_ref_time(1_536_000).saturating_mul(r as u64))
	}
	fn instr_i64rotr(r: u32) -> Weight {
		Weight::from_ref_time(69_765_000_u64)
			// Standard Error: 119_000
			.saturating_add(Weight::from_ref_time(1_673_000).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_process_deletion_queue_batch() -> Weight {
		Weight::from_ref_time(3_264_000_u64).saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_per_trie_key(k: u32) -> Weight {
		Weight::from_ref_time(18_452_000_u64)
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(868_000).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k as u64)))
	}
	fn on_initialize_per_queue_item(q: u32) -> Weight {
		Weight::from_ref_time(17_850_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(1_366_000).saturating_mul(q as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn reinstrument(c: u32) -> Weight {
		Weight::from_ref_time(58_911_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(37_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn call_with_code_per_byte(c: u32) -> Weight {
		Weight::from_ref_time(249_129_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(41_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn instantiate_with_code(c: u32, s: u32) -> Weight {
		Weight::from_ref_time(343_157_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(91_000).saturating_mul(c as u64)) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	fn instantiate(s: u32) -> Weight {
		Weight::from_ref_time(214_708_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	fn call() -> Weight {
		Weight::from_ref_time(165_143_000_u64)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn upload_code(c: u32) -> Weight {
		Weight::from_ref_time(7_662_000_u64)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(44_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn remove_code() -> Weight {
		Weight::from_ref_time(36_939_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn set_code() -> Weight {
		Weight::from_ref_time(40_634_000_u64)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn seal_caller(r: u32) -> Weight {
		Weight::from_ref_time(238_412_000_u64)
			// Standard Error: 237_000
			.saturating_add(Weight::from_ref_time(41_218_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_is_contract(r: u32) -> Weight {
		Weight::from_ref_time(232_854_000_u64)
			// Standard Error: 946_000
			.saturating_add(Weight::from_ref_time(223_968_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(219_612_000_u64)
			// Standard Error: 1_027_000
			.saturating_add(Weight::from_ref_time(288_827_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_own_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(234_491_000_u64)
			// Standard Error: 187_000
			.saturating_add(Weight::from_ref_time(46_151_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_caller_is_origin(r: u32) -> Weight {
		Weight::from_ref_time(230_853_000_u64)
			// Standard Error: 423_000
			.saturating_add(Weight::from_ref_time(12_379_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_address(r: u32) -> Weight {
		Weight::from_ref_time(262_200_000_u64)
			// Standard Error: 680_000
			.saturating_add(Weight::from_ref_time(41_097_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_gas_left(r: u32) -> Weight {
		Weight::from_ref_time(238_854_000_u64)
			// Standard Error: 352_000
			.saturating_add(Weight::from_ref_time(40_424_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_balance(r: u32) -> Weight {
		Weight::from_ref_time(244_375_000_u64)
			// Standard Error: 254_000
			.saturating_add(Weight::from_ref_time(141_275_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_value_transferred(r: u32) -> Weight {
		Weight::from_ref_time(228_935_000_u64)
			// Standard Error: 217_000
			.saturating_add(Weight::from_ref_time(41_275_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_minimum_balance(r: u32) -> Weight {
		Weight::from_ref_time(289_318_000_u64)
			// Standard Error: 6_072_000
			.saturating_add(Weight::from_ref_time(53_513_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_block_number(r: u32) -> Weight {
		Weight::from_ref_time(231_042_000_u64)
			// Standard Error: 257_000
			.saturating_add(Weight::from_ref_time(41_212_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_now(r: u32) -> Weight {
		Weight::from_ref_time(231_815_000_u64)
			// Standard Error: 204_000
			.saturating_add(Weight::from_ref_time(40_994_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_weight_to_fee(r: u32) -> Weight {
		Weight::from_ref_time(231_601_000_u64)
			// Standard Error: 196_000
			.saturating_add(Weight::from_ref_time(125_265_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_gas(r: u32) -> Weight {
		Weight::from_ref_time(168_422_000_u64)
			// Standard Error: 248_000
			.saturating_add(Weight::from_ref_time(19_666_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_input(r: u32) -> Weight {
		Weight::from_ref_time(233_805_000_u64)
			// Standard Error: 246_000
			.saturating_add(Weight::from_ref_time(36_829_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_input_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(292_077_000_u64)
			// Standard Error: 8_000
			.saturating_add(Weight::from_ref_time(7_414_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_return(r: u32) -> Weight {
		Weight::from_ref_time(218_373_000_u64)
			// Standard Error: 1_121_000
			.saturating_add(Weight::from_ref_time(1_119_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_return_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(221_246_000_u64)
			// Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(154_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_terminate(r: u32) -> Weight {
		Weight::from_ref_time(224_390_000_u64)
			// Standard Error: 986_000
			.saturating_add(Weight::from_ref_time(56_614_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(r as u64)))
	}
	fn seal_random(r: u32) -> Weight {
		Weight::from_ref_time(238_257_000_u64)
			// Standard Error: 600_000
			.saturating_add(Weight::from_ref_time(175_068_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_deposit_event(r: u32) -> Weight {
		Weight::from_ref_time(239_014_000_u64)
			// Standard Error: 691_000
			.saturating_add(Weight::from_ref_time(294_504_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32) -> Weight {
		Weight::from_ref_time(536_089_000_u64)
			// Standard Error: 1_264_000
			.saturating_add(Weight::from_ref_time(187_423_000).saturating_mul(t as u64)) // Standard Error: 330_000
			.saturating_add(Weight::from_ref_time(52_899_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(t as u64)))
	}
	fn seal_debug_message(r: u32) -> Weight {
		Weight::from_ref_time(204_147_000_u64)
			// Standard Error: 2_970_000
			.saturating_add(Weight::from_ref_time(31_860_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_set_storage(r: u32) -> Weight {
		Weight::from_ref_time(209_607_000_u64)
			// Standard Error: 1_431_000
			.saturating_add(Weight::from_ref_time(426_469_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_set_storage_per_new_kb(n: u32) -> Weight {
		Weight::from_ref_time(568_632_000_u64)
			// Standard Error: 4_069_000
			.saturating_add(Weight::from_ref_time(73_728_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(60_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(56_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_set_storage_per_old_kb(n: u32) -> Weight {
		Weight::from_ref_time(531_022_000_u64)
			// Standard Error: 2_986_000
			.saturating_add(Weight::from_ref_time(59_455_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(60_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(56_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_clear_storage(r: u32) -> Weight {
		Weight::from_ref_time(249_216_000_u64)
			// Standard Error: 892_000
			.saturating_add(Weight::from_ref_time(399_049_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_clear_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(577_943_000_u64)
			// Standard Error: 2_610_000
			.saturating_add(Weight::from_ref_time(46_675_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(60_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(56_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_get_storage(r: u32) -> Weight {
		Weight::from_ref_time(256_545_000_u64)
			// Standard Error: 4_293_000
			.saturating_add(Weight::from_ref_time(352_792_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_get_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(471_948_000_u64)
			// Standard Error: 3_015_000
			.saturating_add(Weight::from_ref_time(123_457_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(60_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_contains_storage(r: u32) -> Weight {
		Weight::from_ref_time(222_957_000_u64)
			// Standard Error: 573_000
			.saturating_add(Weight::from_ref_time(326_267_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_contains_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(452_524_000_u64)
			// Standard Error: 3_016_000
			.saturating_add(Weight::from_ref_time(52_599_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(59_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_take_storage(r: u32) -> Weight {
		Weight::from_ref_time(253_714_000_u64)
			// Standard Error: 2_210_000
			.saturating_add(Weight::from_ref_time(436_359_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_take_storage_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(537_220_000_u64)
			// Standard Error: 3_988_000
			.saturating_add(Weight::from_ref_time(128_587_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(60_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(56_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(n as u64)))
	}
	fn seal_transfer(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 12_287_000
			.saturating_add(Weight::from_ref_time(1_711_389_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	fn seal_call(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 72_196_000
			.saturating_add(Weight::from_ref_time(16_135_614_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((160_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((160_u64).saturating_mul(r as u64)))
	}
	fn seal_delegate_call(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 38_740_000
			.saturating_add(Weight::from_ref_time(15_946_548_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads((157_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes((78_u64).saturating_mul(r as u64)))
	}
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32) -> Weight {
		Weight::from_ref_time(10_440_479_000_u64)
			// Standard Error: 66_761_000
			.saturating_add(Weight::from_ref_time(1_409_870_000).saturating_mul(t as u64)) // Standard Error: 91_000
			.saturating_add(Weight::from_ref_time(7_889_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(171_u64))
			.saturating_add(RocksDbWeight::get().reads((81_u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(165_u64))
			.saturating_add(RocksDbWeight::get().writes((81_u64).saturating_mul(t as u64)))
	}
	fn seal_instantiate(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 224_319_000
			.saturating_add(Weight::from_ref_time(21_944_241_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((400_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((400_u64).saturating_mul(r as u64)))
	}
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32) -> Weight {
		Weight::from_ref_time(9_043_241_000_u64)
			// Standard Error: 657_371_000
			.saturating_add(Weight::from_ref_time(3_580_908_000).saturating_mul(t as u64)) // Standard Error: 957_000
			.saturating_add(Weight::from_ref_time(108_243_000).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(253_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(249_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t as u64)))
	}
	fn seal_hash_sha2_256(r: u32) -> Weight {
		Weight::from_ref_time(240_103_000_u64)
			// Standard Error: 410_000
			.saturating_add(Weight::from_ref_time(42_464_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_sha2_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(84_225_000_u64)
			// Standard Error: 457_000
			.saturating_add(Weight::from_ref_time(56_765_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_keccak_256(r: u32) -> Weight {
		Weight::from_ref_time(253_941_000_u64)
			// Standard Error: 533_000
			.saturating_add(Weight::from_ref_time(65_491_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_keccak_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 564_000
			.saturating_add(Weight::from_ref_time(190_464_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_256(r: u32) -> Weight {
		Weight::from_ref_time(230_675_000_u64)
			// Standard Error: 264_000
			.saturating_add(Weight::from_ref_time(49_693_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_256_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 787_000
			.saturating_add(Weight::from_ref_time(93_395_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_128(r: u32) -> Weight {
		Weight::from_ref_time(221_471_000_u64)
			// Standard Error: 383_000
			.saturating_add(Weight::from_ref_time(50_140_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_hash_blake2_128_per_kb(n: u32) -> Weight {
		Weight::from_ref_time(349_943_000_u64)
			// Standard Error: 1_152_000
			.saturating_add(Weight::from_ref_time(89_366_000).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_ecdsa_recover(r: u32) -> Weight {
		Weight::from_ref_time(48_735_000_u64)
			// Standard Error: 16_940_000
			.saturating_add(Weight::from_ref_time(2_574_428_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_ecdsa_to_eth_address(r: u32) -> Weight {
		Weight::from_ref_time(238_534_000_u64)
			// Standard Error: 9_940_000
			.saturating_add(Weight::from_ref_time(1_896_551_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn seal_set_code_hash(r: u32) -> Weight {
		Weight::from_ref_time(0_u64)
			// Standard Error: 15_908_000
			.saturating_add(Weight::from_ref_time(1_292_212_000).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads((157_u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes((157_u64).saturating_mul(r as u64)))
	}
	fn instr_i64const(r: u32) -> Weight {
		Weight::from_ref_time(61_320_000_u64)
			// Standard Error: 25_000
			.saturating_add(Weight::from_ref_time(857_000).saturating_mul(r as u64))
	}
	fn instr_i64load(r: u32) -> Weight {
		Weight::from_ref_time(80_697_000_u64)
			// Standard Error: 377_000
			.saturating_add(Weight::from_ref_time(2_300_000).saturating_mul(r as u64))
	}
	fn instr_i64store(r: u32) -> Weight {
		Weight::from_ref_time(67_232_000_u64)
			// Standard Error: 238_000
			.saturating_add(Weight::from_ref_time(2_437_000).saturating_mul(r as u64))
	}
	fn instr_select(r: u32) -> Weight {
		Weight::from_ref_time(63_646_000_u64)
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(2_180_000).saturating_mul(r as u64))
	}
	fn instr_if(r: u32) -> Weight {
		Weight::from_ref_time(74_111_000_u64)
			// Standard Error: 255_000
			.saturating_add(Weight::from_ref_time(2_382_000).saturating_mul(r as u64))
	}
	fn instr_br(r: u32) -> Weight {
		Weight::from_ref_time(69_345_000_u64)
			// Standard Error: 136_000
			.saturating_add(Weight::from_ref_time(1_143_000).saturating_mul(r as u64))
	}
	fn instr_br_if(r: u32) -> Weight {
		Weight::from_ref_time(64_309_000_u64)
			// Standard Error: 59_000
			.saturating_add(Weight::from_ref_time(1_769_000).saturating_mul(r as u64))
	}
	fn instr_br_table(r: u32) -> Weight {
		Weight::from_ref_time(67_983_000_u64)
			// Standard Error: 127_000
			.saturating_add(Weight::from_ref_time(2_069_000).saturating_mul(r as u64))
	}
	fn instr_br_table_per_entry(_e: u32) -> Weight {
		Weight::from_ref_time(69_705_000_u64)
	}
	fn instr_call(r: u32) -> Weight {
		Weight::from_ref_time(53_985_000_u64)
			// Standard Error: 498_000
			.saturating_add(Weight::from_ref_time(8_367_000).saturating_mul(r as u64))
	}
	fn instr_call_indirect(r: u32) -> Weight {
		Weight::from_ref_time(75_090_000_u64)
			// Standard Error: 110_000
			.saturating_add(Weight::from_ref_time(7_960_000).saturating_mul(r as u64))
	}
	fn instr_call_indirect_per_param(p: u32) -> Weight {
		Weight::from_ref_time(119_403_000_u64)
			// Standard Error: 157_000
			.saturating_add(Weight::from_ref_time(242_000).saturating_mul(p as u64))
	}
	fn instr_local_get(r: u32) -> Weight {
		Weight::from_ref_time(63_097_000_u64)
			// Standard Error: 70_000
			.saturating_add(Weight::from_ref_time(1_030_000).saturating_mul(r as u64))
	}
	fn instr_local_set(_r: u32) -> Weight {
		Weight::from_ref_time(141_077_000_u64)
	}
	fn instr_local_tee(r: u32) -> Weight {
		Weight::from_ref_time(64_216_000_u64)
			// Standard Error: 301_000
			.saturating_add(Weight::from_ref_time(2_049_000).saturating_mul(r as u64))
	}
	fn instr_global_get(r: u32) -> Weight {
		Weight::from_ref_time(68_546_000_u64)
			// Standard Error: 92_000
			.saturating_add(Weight::from_ref_time(1_571_000).saturating_mul(r as u64))
	}
	fn instr_global_set(r: u32) -> Weight {
		Weight::from_ref_time(75_561_000_u64)
			// Standard Error: 132_000
			.saturating_add(Weight::from_ref_time(1_248_000).saturating_mul(r as u64))
	}
	fn instr_memory_current(r: u32) -> Weight {
		Weight::from_ref_time(65_243_000_u64)
			// Standard Error: 147_000
			.saturating_add(Weight::from_ref_time(908_000).saturating_mul(r as u64))
	}
	fn instr_memory_grow(r: u32) -> Weight {
		Weight::from_ref_time(60_606_000_u64)
			// Standard Error: 512_000
			.saturating_add(Weight::from_ref_time(149_675_000).saturating_mul(r as u64))
	}
	fn instr_i64clz(r: u32) -> Weight {
		Weight::from_ref_time(67_988_000_u64)
			// Standard Error: 160_000
			.saturating_add(Weight::from_ref_time(1_319_000).saturating_mul(r as u64))
	}
	fn instr_i64ctz(r: u32) -> Weight {
		Weight::from_ref_time(60_810_000_u64)
			// Standard Error: 165_000
			.saturating_add(Weight::from_ref_time(1_528_000).saturating_mul(r as u64))
	}
	fn instr_i64popcnt(r: u32) -> Weight {
		Weight::from_ref_time(61_252_000_u64)
			// Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(1_263_000).saturating_mul(r as u64))
	}
	fn instr_i64eqz(r: u32) -> Weight {
		Weight::from_ref_time(81_604_000_u64)
			// Standard Error: 182_000
			.saturating_add(Weight::from_ref_time(832_000).saturating_mul(r as u64))
	}
	fn instr_i64extendsi32(r: u32) -> Weight {
		Weight::from_ref_time(68_403_000_u64)
			// Standard Error: 89_000
			.saturating_add(Weight::from_ref_time(1_097_000).saturating_mul(r as u64))
	}
	fn instr_i64extendui32(r: u32) -> Weight {
		Weight::from_ref_time(61_513_000_u64)
			// Standard Error: 26_000
			.saturating_add(Weight::from_ref_time(1_273_000).saturating_mul(r as u64))
	}
	fn instr_i32wrapi64(r: u32) -> Weight {
		Weight::from_ref_time(60_171_000_u64)
			// Standard Error: 149_000
			.saturating_add(Weight::from_ref_time(1_577_000).saturating_mul(r as u64))
	}
	fn instr_i64eq(r: u32) -> Weight {
		Weight::from_ref_time(64_724_000_u64)
			// Standard Error: 72_000
			.saturating_add(Weight::from_ref_time(1_734_000).saturating_mul(r as u64))
	}
	fn instr_i64ne(r: u32) -> Weight {
		Weight::from_ref_time(66_128_000_u64)
			// Standard Error: 108_000
			.saturating_add(Weight::from_ref_time(1_702_000).saturating_mul(r as u64))
	}
	fn instr_i64lts(r: u32) -> Weight {
		Weight::from_ref_time(72_686_000_u64)
			// Standard Error: 125_000
			.saturating_add(Weight::from_ref_time(1_462_000).saturating_mul(r as u64))
	}
	fn instr_i64ltu(r: u32) -> Weight {
		Weight::from_ref_time(64_422_000_u64)
			// Standard Error: 61_000
			.saturating_add(Weight::from_ref_time(1_679_000).saturating_mul(r as u64))
	}
	fn instr_i64gts(r: u32) -> Weight {
		Weight::from_ref_time(63_328_000_u64)
			// Standard Error: 56_000
			.saturating_add(Weight::from_ref_time(1_686_000).saturating_mul(r as u64))
	}
	fn instr_i64gtu(r: u32) -> Weight {
		Weight::from_ref_time(62_291_000_u64)
			// Standard Error: 219_000
			.saturating_add(Weight::from_ref_time(2_060_000).saturating_mul(r as u64))
	}
	fn instr_i64les(r: u32) -> Weight {
		Weight::from_ref_time(56_760_000_u64)
			// Standard Error: 98_000
			.saturating_add(Weight::from_ref_time(2_187_000).saturating_mul(r as u64))
	}
	fn instr_i64leu(r: u32) -> Weight {
		Weight::from_ref_time(66_929_000_u64)
			// Standard Error: 121_000
			.saturating_add(Weight::from_ref_time(1_675_000).saturating_mul(r as u64))
	}
	fn instr_i64ges(r: u32) -> Weight {
		Weight::from_ref_time(64_576_000_u64)
			// Standard Error: 180_000
			.saturating_add(Weight::from_ref_time(2_056_000).saturating_mul(r as u64))
	}
	fn instr_i64geu(r: u32) -> Weight {
		Weight::from_ref_time(61_723_000_u64)
			// Standard Error: 25_000
			.saturating_add(Weight::from_ref_time(1_755_000).saturating_mul(r as u64))
	}
	fn instr_i64add(r: u32) -> Weight {
		Weight::from_ref_time(93_317_000_u64)
			// Standard Error: 425_000
			.saturating_add(Weight::from_ref_time(1_215_000).saturating_mul(r as u64))
	}
	fn instr_i64sub(r: u32) -> Weight {
		Weight::from_ref_time(78_930_000_u64)
			// Standard Error: 225_000
			.saturating_add(Weight::from_ref_time(1_389_000).saturating_mul(r as u64))
	}
	fn instr_i64mul(r: u32) -> Weight {
		Weight::from_ref_time(76_127_000_u64)
			// Standard Error: 154_000
			.saturating_add(Weight::from_ref_time(1_336_000).saturating_mul(r as u64))
	}
	fn instr_i64divs(r: u32) -> Weight {
		Weight::from_ref_time(66_724_000_u64)
			// Standard Error: 137_000
			.saturating_add(Weight::from_ref_time(1_892_000).saturating_mul(r as u64))
	}
	fn instr_i64divu(r: u32) -> Weight {
		Weight::from_ref_time(62_385_000_u64)
			// Standard Error: 50_000
			.saturating_add(Weight::from_ref_time(1_795_000).saturating_mul(r as u64))
	}
	fn instr_i64rems(r: u32) -> Weight {
		Weight::from_ref_time(58_318_000_u64)
			// Standard Error: 170_000
			.saturating_add(Weight::from_ref_time(2_213_000).saturating_mul(r as u64))
	}
	fn instr_i64remu(r: u32) -> Weight {
		Weight::from_ref_time(62_575_000_u64)
			// Standard Error: 89_000
			.saturating_add(Weight::from_ref_time(2_053_000).saturating_mul(r as u64))
	}
	fn instr_i64and(r: u32) -> Weight {
		Weight::from_ref_time(72_307_000_u64)
			// Standard Error: 267_000
			.saturating_add(Weight::from_ref_time(1_674_000).saturating_mul(r as u64))
	}
	fn instr_i64or(r: u32) -> Weight {
		Weight::from_ref_time(60_436_000_u64)
			// Standard Error: 191_000
			.saturating_add(Weight::from_ref_time(2_113_000).saturating_mul(r as u64))
	}
	fn instr_i64xor(r: u32) -> Weight {
		Weight::from_ref_time(68_908_000_u64)
			// Standard Error: 159_000
			.saturating_add(Weight::from_ref_time(1_592_000).saturating_mul(r as u64))
	}
	fn instr_i64shl(r: u32) -> Weight {
		Weight::from_ref_time(61_893_000_u64)
			// Standard Error: 107_000
			.saturating_add(Weight::from_ref_time(1_844_000).saturating_mul(r as u64))
	}
	fn instr_i64shrs(r: u32) -> Weight {
		Weight::from_ref_time(67_543_000_u64)
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(1_594_000).saturating_mul(r as u64))
	}
	fn instr_i64shru(r: u32) -> Weight {
		Weight::from_ref_time(65_365_000_u64)
			// Standard Error: 90_000
			.saturating_add(Weight::from_ref_time(1_758_000).saturating_mul(r as u64))
	}
	fn instr_i64rotl(r: u32) -> Weight {
		Weight::from_ref_time(72_029_000_u64)
			// Standard Error: 218_000
			.saturating_add(Weight::from_ref_time(1_536_000).saturating_mul(r as u64))
	}
	fn instr_i64rotr(r: u32) -> Weight {
		Weight::from_ref_time(69_765_000_u64)
			// Standard Error: 119_000
			.saturating_add(Weight::from_ref_time(1_673_000).saturating_mul(r as u64))
	}
}
