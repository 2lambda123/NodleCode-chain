/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_collective
// --extrinsic=*
// --steps=50
// --repeat=20
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: `TechnicalCommittee::Members` (r:1 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:100 w:100)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 50]`.
	/// The range of component `n` is `[0, 50]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		// Minimum execution time: 11_560 nanoseconds.
		Weight::from_parts(11_760_000_u64, 0)
			// Standard Error: 69_914
			.saturating_add(Weight::from_parts(4_240_713_u64, 0).saturating_mul(m as u64))
			// Standard Error: 34_988
			.saturating_add(Weight::from_parts(6_243_924_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 12_900 nanoseconds.
		Weight::from_parts(12_753_735_u64, 0)
			// Standard Error: 42
			.saturating_add(Weight::from_parts(1_704_u64, 0).saturating_mul(b as u64))
			// Standard Error: 891
			.saturating_add(Weight::from_parts(18_438_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:0)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn propose_execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 16_560 nanoseconds.
		Weight::from_parts(16_588_687_u64, 0)
			// Standard Error: 60
			.saturating_add(Weight::from_parts(1_648_u64, 0).saturating_mul(b as u64))
			// Standard Error: 1_268
			.saturating_add(Weight::from_parts(21_138_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalCount` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 22_151 nanoseconds.
		Weight::from_parts(25_151_164_u64, 0)
			// Standard Error: 93
			.saturating_add(Weight::from_parts(2_431_u64, 0).saturating_mul(b as u64))
			// Standard Error: 1_963
			.saturating_add(Weight::from_parts(23_941_u64, 0).saturating_mul(m as u64))
			// Standard Error: 967
			.saturating_add(Weight::from_parts(250_851_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 50]`.
	fn vote(m: u32) -> Weight {
		// Minimum execution time: 24_250 nanoseconds.
		Weight::from_parts(25_467_481_u64, 0)
			// Standard Error: 1_262
			.saturating_add(Weight::from_parts(32_374_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 25_250 nanoseconds.
		Weight::from_parts(26_359_444_u64, 0)
			// Standard Error: 1_855
			.saturating_add(Weight::from_parts(33_078_u64, 0).saturating_mul(m as u64))
			// Standard Error: 873
			.saturating_add(Weight::from_parts(253_111_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 36_690 nanoseconds.
		Weight::from_parts(39_394_253_u64, 0)
			// Standard Error: 156
			.saturating_add(Weight::from_parts(2_355_u64, 0).saturating_mul(b as u64))
			// Standard Error: 3_430
			.saturating_add(Weight::from_parts(7_694_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_613
			.saturating_add(Weight::from_parts(280_476_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 27_170 nanoseconds.
		Weight::from_parts(28_664_778_u64, 0)
			// Standard Error: 1_840
			.saturating_add(Weight::from_parts(36_492_u64, 0).saturating_mul(m as u64))
			// Standard Error: 866
			.saturating_add(Weight::from_parts(250_418_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 38_380 nanoseconds.
		Weight::from_parts(40_627_707_u64, 0)
			// Standard Error: 131
			.saturating_add(Weight::from_parts(2_514_u64, 0).saturating_mul(b as u64))
			// Standard Error: 2_875
			.saturating_add(Weight::from_parts(20_557_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_352
			.saturating_add(Weight::from_parts(285_261_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32) -> Weight {
		// Minimum execution time: 14_090 nanoseconds.
		Weight::from_parts(15_702_364_u64, 0)
			// Standard Error: 673
			.saturating_add(Weight::from_parts(235_173_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
