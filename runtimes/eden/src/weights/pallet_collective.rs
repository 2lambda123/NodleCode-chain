/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: `TechnicalCommittee::Members` (r:1 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:100 w:100)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 50]`.
	/// The range of component `n` is `[0, 50]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		// Minimum execution time: 14_360 nanoseconds.
		Weight::from_parts(14_590_000_u64, 0)
			// Standard Error: 71_598
			.saturating_add(Weight::from_parts(4_305_632_u64, 0).saturating_mul(m as u64))
			// Standard Error: 35_831
			.saturating_add(Weight::from_parts(6_286_513_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(17_966_082_u64, 0)
			// Standard Error: 39
			.saturating_add(Weight::from_parts(1_452_u64, 0).saturating_mul(b as u64))
			// Standard Error: 825
			.saturating_add(Weight::from_parts(16_633_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:0)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn propose_execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 21_760 nanoseconds.
		Weight::from_parts(21_347_577_u64, 0)
			// Standard Error: 66
			.saturating_add(Weight::from_parts(1_722_u64, 0).saturating_mul(b as u64))
			// Standard Error: 1_397
			.saturating_add(Weight::from_parts(26_163_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalCount` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 27_360 nanoseconds.
		Weight::from_parts(28_396_786_u64, 0)
			// Standard Error: 93
			.saturating_add(Weight::from_parts(2_582_u64, 0).saturating_mul(b as u64))
			// Standard Error: 1_955
			.saturating_add(Weight::from_parts(29_946_u64, 0).saturating_mul(m as u64))
			// Standard Error: 963
			.saturating_add(Weight::from_parts(238_778_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 50]`.
	fn vote(m: u32) -> Weight {
		// Minimum execution time: 26_780 nanoseconds.
		Weight::from_parts(27_428_481_u64, 0)
			// Standard Error: 1_003
			.saturating_add(Weight::from_parts(39_921_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 29_720 nanoseconds.
		Weight::from_parts(30_944_208_u64, 0)
			// Standard Error: 1_747
			.saturating_add(Weight::from_parts(27_283_u64, 0).saturating_mul(m as u64))
			// Standard Error: 821
			.saturating_add(Weight::from_parts(235_964_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 42_820 nanoseconds.
		Weight::from_parts(45_326_267_u64, 0)
			// Standard Error: 119
			.saturating_add(Weight::from_parts(1_874_u64, 0).saturating_mul(b as u64))
			// Standard Error: 2_619
			.saturating_add(Weight::from_parts(12_889_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_232
			.saturating_add(Weight::from_parts(252_123_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 32_510 nanoseconds.
		Weight::from_parts(32_965_839_u64, 0)
			// Standard Error: 1_806
			.saturating_add(Weight::from_parts(40_216_u64, 0).saturating_mul(m as u64))
			// Standard Error: 849
			.saturating_add(Weight::from_parts(237_383_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, _m: u32, p: u32) -> Weight {
		// Minimum execution time: 45_570 nanoseconds.
		Weight::from_parts(48_653_945_u64, 0)
			// Standard Error: 200
			.saturating_add(Weight::from_parts(2_343_u64, 0).saturating_mul(b as u64))
			// Standard Error: 2_067
			.saturating_add(Weight::from_parts(269_485_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32) -> Weight {
		// Minimum execution time: 17_940 nanoseconds.
		Weight::from_parts(19_732_107_u64, 0)
			// Standard Error: 786
			.saturating_add(Weight::from_parts(218_701_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
