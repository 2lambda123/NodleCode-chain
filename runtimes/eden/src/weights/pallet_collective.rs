/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-a18ada46`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_collective
// --extrinsic=*
// --steps=50
// --repeat=20
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: `TechnicalCommittee::Members` (r:1 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:100 w:100)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 50]`.
	/// The range of component `n` is `[0, 50]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		// Minimum execution time: 11_280 nanoseconds.
		Weight::from_parts(11_530_000_u64, 0)
			// Standard Error: 69_167
			.saturating_add(Weight::from_parts(4_158_323_u64, 0).saturating_mul(m as u64))
			// Standard Error: 34_614
			.saturating_add(Weight::from_parts(6_155_741_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 13_030 nanoseconds.
		Weight::from_parts(13_136_296_u64, 0)
			// Standard Error: 43
			.saturating_add(Weight::from_parts(1_519_u64, 0).saturating_mul(b as u64))
			// Standard Error: 911
			.saturating_add(Weight::from_parts(12_393_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:0)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 50]`.
	fn propose_execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 16_800 nanoseconds.
		Weight::from_parts(16_768_712_u64, 0)
			// Standard Error: 59
			.saturating_add(Weight::from_parts(1_410_u64, 0).saturating_mul(b as u64))
			// Standard Error: 1_233
			.saturating_add(Weight::from_parts(20_085_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalCount` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 22_489 nanoseconds.
		Weight::from_parts(24_594_632_u64, 0)
			// Standard Error: 98
			.saturating_add(Weight::from_parts(2_808_u64, 0).saturating_mul(b as u64))
			// Standard Error: 2_066
			.saturating_add(Weight::from_parts(35_376_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_018
			.saturating_add(Weight::from_parts(242_595_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 50]`.
	fn vote(m: u32) -> Weight {
		// Minimum execution time: 24_260 nanoseconds.
		Weight::from_parts(25_254_252_u64, 0)
			// Standard Error: 1_294
			.saturating_add(Weight::from_parts(27_228_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 25_320 nanoseconds.
		Weight::from_parts(26_505_311_u64, 0)
			// Standard Error: 1_861
			.saturating_add(Weight::from_parts(39_411_u64, 0).saturating_mul(m as u64))
			// Standard Error: 875
			.saturating_add(Weight::from_parts(239_195_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 36_620 nanoseconds.
		Weight::from_parts(39_212_493_u64, 0)
			// Standard Error: 126
			.saturating_add(Weight::from_parts(2_399_u64, 0).saturating_mul(b as u64))
			// Standard Error: 2_771
			.saturating_add(Weight::from_parts(19_616_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_303
			.saturating_add(Weight::from_parts(263_086_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 27_840 nanoseconds.
		Weight::from_parts(29_159_560_u64, 0)
			// Standard Error: 1_850
			.saturating_add(Weight::from_parts(37_530_u64, 0).saturating_mul(m as u64))
			// Standard Error: 870
			.saturating_add(Weight::from_parts(239_153_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 50]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 39_020 nanoseconds.
		Weight::from_parts(42_117_379_u64, 0)
			// Standard Error: 137
			.saturating_add(Weight::from_parts(2_150_u64, 0).saturating_mul(b as u64))
			// Standard Error: 3_004
			.saturating_add(Weight::from_parts(15_326_u64, 0).saturating_mul(m as u64))
			// Standard Error: 1_413
			.saturating_add(Weight::from_parts(262_228_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32) -> Weight {
		// Minimum execution time: 14_700 nanoseconds.
		Weight::from_parts(16_381_810_u64, 0)
			// Standard Error: 782
			.saturating_add(Weight::from_parts(223_665_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
