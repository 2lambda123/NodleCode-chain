/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-13, STEPS: `4`, REPEAT: 4, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `tama`, CPU: `11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_collective
// --extrinsic=*
// --steps=4
// --repeat=4
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: `TechnicalCommittee::Members` (r:1 w:1)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:100 w:100)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 10]`.
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		// Minimum execution time: 8_548 nanoseconds.
		Weight::from_parts(9_023_000_u64, 0)
			// Standard Error: 5_123_775
			.saturating_add(Weight::from_parts(22_237_271_u64, 0).saturating_mul(m as u64))
			// Standard Error: 517_114
			.saturating_add(Weight::from_parts(3_934_795_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 14_270 nanoseconds.
		Weight::from_parts(14_627_593_u64, 0)
			// Standard Error: 412
			.saturating_add(Weight::from_parts(1_441_u64, 0).saturating_mul(b as u64))
			// Standard Error: 46_906
			.saturating_add(Weight::from_parts(38_204_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:0)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn propose_execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 17_806 nanoseconds.
		Weight::from_parts(18_954_753_u64, 0)
			// Standard Error: 572
			.saturating_add(Weight::from_parts(1_224_u64, 0).saturating_mul(b as u64))
			// Standard Error: 65_002
			.saturating_add(Weight::from_parts(3_052_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalCount` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 23_837 nanoseconds.
		Weight::from_parts(26_501_586_u64, 0)
			// Standard Error: 1_197
			.saturating_add(Weight::from_parts(1_442_u64, 0).saturating_mul(b as u64))
			// Standard Error: 147_121
			.saturating_add(Weight::from_parts(60_188_u64, 0).saturating_mul(m as u64))
			// Standard Error: 12_367
			.saturating_add(Weight::from_parts(222_685_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 10]`.
	fn vote(m: u32) -> Weight {
		// Minimum execution time: 25_722 nanoseconds.
		Weight::from_parts(24_428_245_u64, 0)
			// Standard Error: 136_251
			.saturating_add(Weight::from_parts(405_966_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 25_795 nanoseconds.
		Weight::from_parts(27_516_673_u64, 0)
			// Standard Error: 134_863
			.saturating_add(Weight::from_parts(92_196_u64, 0).saturating_mul(m as u64))
			// Standard Error: 8_173
			.saturating_add(Weight::from_parts(193_291_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 38_664 nanoseconds.
		Weight::from_parts(40_655_454_u64, 0)
			// Standard Error: 1_104
			.saturating_add(Weight::from_parts(2_381_u64, 0).saturating_mul(b as u64))
			// Standard Error: 11_401
			.saturating_add(Weight::from_parts(236_992_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 27_714 nanoseconds.
		Weight::from_parts(31_696_661_u64, 0)
			// Standard Error: 10_552
			.saturating_add(Weight::from_parts(193_910_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Voting` (r:1 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Members` (r:1 w:0)
	// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Prime` (r:1 w:0)
	// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:1 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 39_780 nanoseconds.
		Weight::from_parts(38_180_963_u64, 0)
			// Standard Error: 1_080
			.saturating_add(Weight::from_parts(2_949_u64, 0).saturating_mul(b as u64))
			// Standard Error: 184_166
			.saturating_add(Weight::from_parts(167_257_u64, 0).saturating_mul(m as u64))
			// Standard Error: 11_161
			.saturating_add(Weight::from_parts(241_982_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `TechnicalCommittee::Proposals` (r:1 w:1)
	// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::Voting` (r:0 w:1)
	// Proof: `TechnicalCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TechnicalCommittee::ProposalOf` (r:0 w:1)
	// Proof: `TechnicalCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32) -> Weight {
		// Minimum execution time: 15_035 nanoseconds.
		Weight::from_parts(16_508_907_u64, 0)
			// Standard Error: 11_646
			.saturating_add(Weight::from_parts(169_692_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
