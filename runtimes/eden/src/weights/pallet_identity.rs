/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2024  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-13, STEPS: `4`, REPEAT: 4, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `tama`, CPU: `11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet=pallet_identity
// --extrinsic=*
// --steps=4
// --repeat=4
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/runtime-eden/runtime_eden.wasm
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn add_registrar(r: u32) -> Weight {
		// Minimum execution time: 9_957 nanoseconds.
		Weight::from_parts(10_955_833_u64, 0)
			// Standard Error: 32_600
			.saturating_add(Weight::from_parts(159_966_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	fn set_identity(r: u32) -> Weight {
		// Minimum execution time: 147_520 nanoseconds.
		Weight::from_parts(150_146_946_u64, 0)
			// Standard Error: 72_742
			.saturating_add(Weight::from_parts(168_871_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:100 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn set_subs_new(s: u32) -> Weight {
		// Minimum execution time: 11_484 nanoseconds.
		Weight::from_parts(18_762_872_u64, 0)
			// Standard Error: 68_758
			.saturating_add(Weight::from_parts(4_848_947_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 100]`.
	fn set_subs_old(p: u32) -> Weight {
		// Minimum execution time: 10_957 nanoseconds.
		Weight::from_parts(20_340_858_u64, 0)
			// Standard Error: 90_804
			.saturating_add(Weight::from_parts(2_050_447_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	fn clear_identity(_r: u32, s: u32) -> Weight {
		// Minimum execution time: 71_931 nanoseconds.
		Weight::from_parts(74_578_450_u64, 0)
			// Standard Error: 22_113
			.saturating_add(Weight::from_parts(1_839_776_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::Registrars` (r:1 w:0)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	fn request_judgement(_r: u32) -> Weight {
		// Minimum execution time: 103_684 nanoseconds.
		Weight::from_parts(118_491_039_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	fn cancel_request(r: u32) -> Weight {
		// Minimum execution time: 100_878 nanoseconds.
		Weight::from_parts(102_336_285_u64, 0)
			// Standard Error: 62_733
			.saturating_add(Weight::from_parts(59_106_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_fee(r: u32) -> Weight {
		// Minimum execution time: 6_464 nanoseconds.
		Weight::from_parts(7_220_708_u64, 0)
			// Standard Error: 22_560
			.saturating_add(Weight::from_parts(109_891_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_account_id(r: u32) -> Weight {
		// Minimum execution time: 7_001 nanoseconds.
		Weight::from_parts(7_420_250_u64, 0)
			// Standard Error: 16_647
			.saturating_add(Weight::from_parts(71_100_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_fields(r: u32) -> Weight {
		// Minimum execution time: 7_161 nanoseconds.
		Weight::from_parts(7_367_125_u64, 0)
			// Standard Error: 19_067
			.saturating_add(Weight::from_parts(78_525_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:0)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn provide_judgement(r: u32) -> Weight {
		// Minimum execution time: 125_432 nanoseconds.
		Weight::from_parts(125_391_375_u64, 0)
			// Standard Error: 160_434
			.saturating_add(Weight::from_parts(433_975_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	fn kill_identity(_r: u32, s: u32) -> Weight {
		// Minimum execution time: 92_743 nanoseconds.
		Weight::from_parts(101_426_863_u64, 0)
			// Standard Error: 20_784
			.saturating_add(Weight::from_parts(1_830_083_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 99]`.
	fn add_sub(s: u32) -> Weight {
		// Minimum execution time: 34_673 nanoseconds.
		Weight::from_parts(39_295_550_u64, 0)
			// Standard Error: 33_787
			.saturating_add(Weight::from_parts(95_963_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 100]`.
	fn rename_sub(s: u32) -> Weight {
		// Minimum execution time: 15_590 nanoseconds.
		Weight::from_parts(17_093_122_u64, 0)
			// Standard Error: 11_127
			.saturating_add(Weight::from_parts(47_527_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 100]`.
	fn remove_sub(s: u32) -> Weight {
		// Minimum execution time: 38_643 nanoseconds.
		Weight::from_parts(41_068_703_u64, 0)
			// Standard Error: 14_999
			.saturating_add(Weight::from_parts(78_146_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 99]`.
	fn quit_sub(s: u32) -> Weight {
		// Minimum execution time: 26_096 nanoseconds.
		Weight::from_parts(28_122_650_u64, 0)
			// Standard Error: 13_450
			.saturating_add(Weight::from_parts(74_534_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Identity::UsernameAuthorities` (r:0 w:1)
	// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn add_username_authority() -> Weight {
		// Minimum execution time: 8_745 nanoseconds.
		Weight::from_parts(10_900_000_u64, 0).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
	// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn remove_username_authority() -> Weight {
		// Minimum execution time: 10_693 nanoseconds.
		Weight::from_parts(11_494_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
	// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Identity::AccountOfUsername` (r:1 w:1)
	// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	// Storage: `Identity::PendingUsernames` (r:1 w:0)
	// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	fn set_username_for() -> Weight {
		// Minimum execution time: 71_669 nanoseconds.
		Weight::from_parts(73_014_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `Identity::PendingUsernames` (r:1 w:1)
	// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	// Storage: `Identity::AccountOfUsername` (r:0 w:1)
	// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	fn accept_username() -> Weight {
		// Minimum execution time: 25_214 nanoseconds.
		Weight::from_parts(27_494_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `Identity::PendingUsernames` (r:1 w:1)
	// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	fn remove_expired_approval() -> Weight {
		// Minimum execution time: 14_479 nanoseconds.
		Weight::from_parts(18_625_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::AccountOfUsername` (r:1 w:0)
	// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	fn set_primary_username() -> Weight {
		// Minimum execution time: 20_673 nanoseconds.
		Weight::from_parts(23_946_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::AccountOfUsername` (r:1 w:1)
	// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7572), added: 10047, mode: `MaxEncodedLen`)
	fn remove_dangling_username() -> Weight {
		// Minimum execution time: 13_375 nanoseconds.
		Weight::from_parts(14_396_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
