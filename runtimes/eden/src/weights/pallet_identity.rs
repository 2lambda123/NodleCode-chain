/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-b606df9f`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --template=./.maintain/external_pallet_weights.hbs
// --output=runtimes/eden/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use core::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Minimum execution time: 17_660 nanoseconds.
		Weight::from_parts(18_817_843_u64, 0)
			// Standard Error: 2_458
			.saturating_add(Weight::from_parts(100_477_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn set_identity(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 50_300 nanoseconds.
		Weight::from_parts(49_507_329_u64, 0)
			// Standard Error: 6_381
			.saturating_add(Weight::from_parts(95_778_u64, 0).saturating_mul(r as u64))
			// Standard Error: 1_245
			.saturating_add(Weight::from_parts(881_945_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:100 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn set_subs_new(s: u32, ) -> Weight {
		// Minimum execution time: 15_029 nanoseconds.
		Weight::from_parts(36_102_451_u64, 0)
			// Standard Error: 6_061
			.saturating_add(Weight::from_parts(5_232_207_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 100]`.
	fn set_subs_old(p: u32, ) -> Weight {
		// Minimum execution time: 14_889 nanoseconds.
		Weight::from_parts(35_849_838_u64, 0)
			// Standard Error: 5_020
			.saturating_add(Weight::from_parts(2_028_586_u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
	}
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
	fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 95_190 nanoseconds.
		Weight::from_parts(51_120_333_u64, 0)
			// Standard Error: 10_482
			.saturating_add(Weight::from_parts(46_958_u64, 0).saturating_mul(r as u64))
			// Standard Error: 2_046
			.saturating_add(Weight::from_parts(2_017_340_u64, 0).saturating_mul(s as u64))
			// Standard Error: 2_046
			.saturating_add(Weight::from_parts(465_024_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::Registrars` (r:1 w:0)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 49_280 nanoseconds.
		Weight::from_parts(48_178_468_u64, 0)
			// Standard Error: 8_224
			.saturating_add(Weight::from_parts(134_086_u64, 0).saturating_mul(r as u64))
			// Standard Error: 1_604
			.saturating_add(Weight::from_parts(893_504_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 46_130 nanoseconds.
		Weight::from_parts(44_713_461_u64, 0)
			// Standard Error: 7_879
			.saturating_add(Weight::from_parts(107_189_u64, 0).saturating_mul(r as u64))
			// Standard Error: 1_537
			.saturating_add(Weight::from_parts(911_404_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_fee(r: u32, ) -> Weight {
		// Minimum execution time: 10_880 nanoseconds.
		Weight::from_parts(11_732_473_u64, 0)
			// Standard Error: 1_638
			.saturating_add(Weight::from_parts(77_335_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Minimum execution time: 11_210 nanoseconds.
		Weight::from_parts(11_956_179_u64, 0)
			// Standard Error: 1_558
			.saturating_add(Weight::from_parts(72_337_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:1)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	fn set_fields(r: u32, ) -> Weight {
		// Minimum execution time: 10_680 nanoseconds.
		Weight::from_parts(11_578_069_u64, 0)
			// Standard Error: 1_702
			.saturating_add(Weight::from_parts(74_478_u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::Registrars` (r:1 w:0)
	// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1141), added: 1636, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 19]`.
	/// The range of component `x` is `[0, 100]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 34_680 nanoseconds.
		Weight::from_parts(32_823_845_u64, 0)
			// Standard Error: 10_530
			.saturating_add(Weight::from_parts(144_065_u64, 0).saturating_mul(r as u64))
			// Standard Error: 1_948
			.saturating_add(Weight::from_parts(1_406_346_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `Identity::IdentityOf` (r:1 w:1)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:0 w:100)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
	fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 121_170 nanoseconds.
		Weight::from_parts(77_541_808_u64, 0)
			// Standard Error: 10_306
			.saturating_add(Weight::from_parts(97_527_u64, 0).saturating_mul(r as u64))
			// Standard Error: 2_012
			.saturating_add(Weight::from_parts(2_078_027_u64, 0).saturating_mul(s as u64))
			// Standard Error: 2_012
			.saturating_add(Weight::from_parts(469_446_u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s as u64)))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 99]`.
	fn add_sub(s: u32, ) -> Weight {
		// Minimum execution time: 45_220 nanoseconds.
		Weight::from_parts(50_433_258_u64, 0)
			// Standard Error: 1_470
			.saturating_add(Weight::from_parts(76_458_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 100]`.
	fn rename_sub(s: u32, ) -> Weight {
		// Minimum execution time: 19_771 nanoseconds.
		Weight::from_parts(22_221_878_u64, 0)
			// Standard Error: 636
			.saturating_add(Weight::from_parts(27_580_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Identity::IdentityOf` (r:1 w:0)
	// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(7538), added: 10013, mode: `MaxEncodedLen`)
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 100]`.
	fn remove_sub(s: u32, ) -> Weight {
		// Minimum execution time: 48_520 nanoseconds.
		Weight::from_parts(52_619_390_u64, 0)
			// Standard Error: 1_126
			.saturating_add(Weight::from_parts(58_598_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Identity::SuperOf` (r:1 w:1)
	// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	// Storage: `Identity::SubsOf` (r:1 w:1)
	// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(3258), added: 5733, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 99]`.
	fn quit_sub(s: u32, ) -> Weight {
		// Minimum execution time: 34_120 nanoseconds.
		Weight::from_parts(36_776_043_u64, 0)
			// Standard Error: 894
			.saturating_add(Weight::from_parts(67_331_u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
