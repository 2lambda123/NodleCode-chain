/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_sponsorship
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-b606df9f`, CPU: `AMD EPYC 7B13`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_sponsorship
// --extrinsic=*
// --wasm-execution=compiled
// --template=./.maintain/internal_pallet_weights.hbs
// --output=temp_weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_sponsorship.
pub trait WeightInfo {
	fn create_pot() -> Weight;
	fn remove_pot() -> Weight;
	fn update_pot_limits() -> Weight;
	fn update_sponsorship_type() -> Weight;
	fn register_users(l: u32, ) -> Weight;
	fn remove_users(l: u32, ) -> Weight;
	fn update_users_limits(l: u32, ) -> Weight;
	fn pre_sponsor() -> Weight;
	fn post_sponsor() -> Weight;
	fn migrate_users(l: u32, ) -> Weight;
	fn migrate_pots(l: u32, ) -> Weight;
}

/// Weight functions for `pallet_sponsorship`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pot() -> Weight {
		// Minimum execution time: 41_640 nanoseconds.
		Weight::from_parts(43_050_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_pot() -> Weight {
		// Minimum execution time: 29_140 nanoseconds.
		Weight::from_parts(30_480_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 22_560 nanoseconds.
		Weight::from_parts(23_130_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 18_980 nanoseconds.
		Weight::from_parts(19_540_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 71_760 nanoseconds.
		Weight::from_parts(72_560_000_u64, 0)
			// Standard Error: 11_650
			.saturating_add(Weight::from_parts(45_986_453_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 139_100 nanoseconds.
		Weight::from_parts(140_630_000_u64, 0)
			// Standard Error: 61_620
			.saturating_add(Weight::from_parts(122_776_792_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 31_270 nanoseconds.
		Weight::from_parts(31_949_000_u64, 0)
			// Standard Error: 9_793
			.saturating_add(Weight::from_parts(9_475_596_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 78_790 nanoseconds.
		Weight::from_parts(80_860_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::User` (r:0 w:1)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::Pot` (r:0 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 71_660 nanoseconds.
		Weight::from_parts(72_360_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `Sponsorship::User` (r:1000 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_users(l: u32, ) -> Weight {
		// Minimum execution time: 22_540 nanoseconds.
		Weight::from_parts(22_930_000_u64, 0)
			// Standard Error: 3_486
			.saturating_add(Weight::from_parts(10_661_741_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1000 w:999)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_pots(l: u32, ) -> Weight {
		// Minimum execution time: 18_400 nanoseconds.
		Weight::from_parts(18_990_000_u64, 0)
			// Standard Error: 2_823
			.saturating_add(Weight::from_parts(6_018_841_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
}

impl WeightInfo for () {
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pot() -> Weight {
		// Minimum execution time: 41_640 nanoseconds.
		Weight::from_parts(43_050_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_pot() -> Weight {
		// Minimum execution time: 29_140 nanoseconds.
		Weight::from_parts(30_480_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 22_560 nanoseconds.
		Weight::from_parts(23_130_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 18_980 nanoseconds.
		Weight::from_parts(19_540_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 71_760 nanoseconds.
		Weight::from_parts(72_560_000_u64, 0)
			// Standard Error: 11_650
			.saturating_add(Weight::from_parts(45_986_453_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 139_100 nanoseconds.
		Weight::from_parts(140_630_000_u64, 0)
			// Standard Error: 61_620
			.saturating_add(Weight::from_parts(122_776_792_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 31_270 nanoseconds.
		Weight::from_parts(31_949_000_u64, 0)
			// Standard Error: 9_793
			.saturating_add(Weight::from_parts(9_475_596_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 78_790 nanoseconds.
		Weight::from_parts(80_860_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::User` (r:0 w:1)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::Pot` (r:0 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 71_660 nanoseconds.
		Weight::from_parts(72_360_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: `Sponsorship::User` (r:1000 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_users(l: u32, ) -> Weight {
		// Minimum execution time: 22_540 nanoseconds.
		Weight::from_parts(22_930_000_u64, 0)
			// Standard Error: 3_486
			.saturating_add(Weight::from_parts(10_661_741_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1000 w:999)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_pots(l: u32, ) -> Weight {
		// Minimum execution time: 18_400 nanoseconds.
		Weight::from_parts(18_990_000_u64, 0)
			// Standard Error: 2_823
			.saturating_add(Weight::from_parts(6_018_841_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
}
