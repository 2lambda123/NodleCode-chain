/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_sponsorship
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-02-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `tama`, CPU: `11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_sponsorship
// --extrinsic=*
// --wasm-execution=compiled
// --template=./.maintain/internal_pallet_weights.hbs
// --output=temp_weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_sponsorship.
pub trait WeightInfo {
	fn create_pot() -> Weight;
	fn remove_pot() -> Weight;
	fn update_pot_limits() -> Weight;
	fn update_sponsorship_type() -> Weight;
	fn register_users(l: u32, ) -> Weight;
	fn remove_users(l: u32, ) -> Weight;
	fn update_users_limits(l: u32, ) -> Weight;
	fn pre_sponsor() -> Weight;
	fn post_sponsor() -> Weight;
}

/// Weight functions for `pallet_sponsorship`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pot() -> Weight {
		// Minimum execution time: 32_880 nanoseconds.
		Weight::from_parts(33_985_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_pot() -> Weight {
		// Minimum execution time: 24_205 nanoseconds.
		Weight::from_parts(25_120_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 18_291 nanoseconds.
		Weight::from_parts(18_870_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 14_668 nanoseconds.
		Weight::from_parts(15_410_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 54_519 nanoseconds.
		Weight::from_parts(750_997_581_u64, 0)
			// Standard Error: 48_272
			.saturating_add(Weight::from_parts(22_686_755_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 82_416 nanoseconds.
		Weight::from_parts(83_038_000_u64, 0)
			// Standard Error: 42_912
			.saturating_add(Weight::from_parts(70_094_474_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 19_269 nanoseconds.
		Weight::from_parts(19_558_000_u64, 0)
			// Standard Error: 7_281
			.saturating_add(Weight::from_parts(5_868_202_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 45_955 nanoseconds.
		Weight::from_parts(46_861_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::User` (r:0 w:1)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::Pot` (r:0 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 41_084 nanoseconds.
		Weight::from_parts(41_662_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

impl WeightInfo for () {
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pot() -> Weight {
		// Minimum execution time: 32_880 nanoseconds.
		Weight::from_parts(33_985_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_pot() -> Weight {
		// Minimum execution time: 24_205 nanoseconds.
		Weight::from_parts(25_120_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 18_291 nanoseconds.
		Weight::from_parts(18_870_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 14_668 nanoseconds.
		Weight::from_parts(15_410_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 54_519 nanoseconds.
		Weight::from_parts(750_997_581_u64, 0)
			// Standard Error: 48_272
			.saturating_add(Weight::from_parts(22_686_755_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1998 w:1998)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::UserRegistrationCount` (r:999 w:999)
	// Proof: `Sponsorship::UserRegistrationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 82_416 nanoseconds.
		Weight::from_parts(83_038_000_u64, 0)
			// Standard Error: 42_912
			.saturating_add(Weight::from_parts(70_094_474_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof: UNKNOWN KEY `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: `Sponsorship::Pot` (r:1 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:999 w:999)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 19_269 nanoseconds.
		Weight::from_parts(19_558_000_u64, 0)
			// Standard Error: 7_281
			.saturating_add(Weight::from_parts(5_868_202_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: `Sponsorship::Pot` (r:1 w:0)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::User` (r:1 w:0)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 45_955 nanoseconds.
		Weight::from_parts(46_861_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Sponsorship::User` (r:0 w:1)
	// Proof: `Sponsorship::User` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sponsorship::Pot` (r:0 w:1)
	// Proof: `Sponsorship::Pot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 41_084 nanoseconds.
		Weight::from_parts(41_662_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
