/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_sponsorship
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/nodle-parachain
// benchmark
// pallet
// --pallet
// pallet_sponsorship
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/internal_pallet_weights.hbs
// --output
// ./pallets/sponsorship/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_sponsorship.
pub trait WeightInfo {
	fn create_pot() -> Weight;
	fn remove_pot() -> Weight;
	fn update_pot_limits() -> Weight;
	fn update_sponsorship_type() -> Weight;
	fn register_users(l: u32, ) -> Weight;
	fn remove_users(l: u32, ) -> Weight;
	fn update_users_limits(l: u32, ) -> Weight;
	fn pre_sponsor() -> Weight;
	fn post_sponsor() -> Weight;
	fn migrate_users(l: u32, ) -> Weight;
	fn migrate_pots(l: u32, ) -> Weight;
	fn determine_optimum_pots_users(p: u32, u: u32, ) -> Weight;
}

/// Weight functions for `pallet_sponsorship`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn create_pot() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(27_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_pot() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(19_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_parts(13_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1998 w:1998)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_parts(46_000_000_u64, 0)
			// Standard Error: 38_873
			.saturating_add(Weight::from_parts(30_938_500_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1998 w:1998)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_parts(94_000_000_u64, 0)
			// Standard Error: 57_626
			.saturating_add(Weight::from_parts(82_019_007_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(21_000_000_u64, 0)
			// Standard Error: 9_275
			.saturating_add(Weight::from_parts(6_412_844_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship Pot (r:1 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_parts(56_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:0 w:1)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:0 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_parts(51_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Sponsorship PotMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship PotMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:2 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship UserMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1000 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_users(l: u32, ) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(26_000_000_u64, 0)
			// Standard Error: 5_221
			.saturating_add(Weight::from_parts(7_415_441_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship PotMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship PotMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:1000 w:999)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship UserMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_pots(l: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000_u64, 0)
			// Standard Error: 4_109
			.saturating_add(Weight::from_parts(4_188_731_u64, 0).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship Pot (r:11 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:101 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[1, 10]`.
	/// The range of component `u` is `[1, 100]`.
	fn determine_optimum_pots_users(p: u32, u: u32, ) -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(5_322_875_u64, 0)
			// Standard Error: 535_518
			.saturating_add(Weight::from_parts(3_127_680_u64, 0).saturating_mul(p as u64))
			// Standard Error: 49_589
			.saturating_add(Weight::from_parts(3_456_478_u64, 0).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(u as u64)))
	}
}

impl WeightInfo for () {
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn create_pot() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(27_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_pot() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(19_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn update_pot_limits() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn update_sponsorship_type() -> Weight {
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_parts(13_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1998 w:1998)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 1000]`.
	fn register_users(l: u32, ) -> Weight {
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_parts(46_000_000_u64, 0)
			// Standard Error: 38_873
			.saturating_add(Weight::from_parts(30_938_500_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1998 w:1998)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn remove_users(l: u32, ) -> Weight {
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_parts(94_000_000_u64, 0)
			// Standard Error: 57_626
			.saturating_add(Weight::from_parts(82_019_007_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(l as u64)))
	}
	// Storage: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Proof Skipped: unknown `0x4d95b5e86eb03e9e163361bfe841137d4e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	// Storage: Sponsorship Pot (r:1 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:999 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn update_users_limits(l: u32, ) -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(21_000_000_u64, 0)
			// Standard Error: 9_275
			.saturating_add(Weight::from_parts(6_412_844_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship Pot (r:1 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn pre_sponsor() -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_parts(56_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances TotalIssuance (r:1 w:0)
	// Proof: Balances TotalIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Number (r:1 w:0)
	// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	// Storage: System EventCount (r:1 w:1)
	// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Events (r:1 w:1)
	// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:0 w:1)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:0 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	fn post_sponsor() -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_parts(51_000_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	// Storage: Sponsorship PotMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship PotMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:2 w:1)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship UserMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:1000 w:999)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserRegistrationCount (r:999 w:999)
	// Proof Skipped: Sponsorship UserRegistrationCount (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_users(l: u32, ) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(26_000_000_u64, 0)
			// Standard Error: 5_221
			.saturating_add(Weight::from_parts(7_415_441_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship PotMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship PotMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Sponsorship Pot (r:1000 w:999)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship UserMigrationCursor (r:1 w:1)
	// Proof Skipped: Sponsorship UserMigrationCursor (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 1000]`.
	fn migrate_pots(l: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000_u64, 0)
			// Standard Error: 4_109
			.saturating_add(Weight::from_parts(4_188_731_u64, 0).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l as u64)))
	}
	// Storage: Sponsorship Pot (r:11 w:0)
	// Proof Skipped: Sponsorship Pot (max_values: None, max_size: None, mode: Measured)
	// Storage: Sponsorship User (r:101 w:0)
	// Proof Skipped: Sponsorship User (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[1, 10]`.
	/// The range of component `u` is `[1, 100]`.
	fn determine_optimum_pots_users(p: u32, u: u32, ) -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(5_322_875_u64, 0)
			// Standard Error: 535_518
			.saturating_add(Weight::from_parts(3_127_680_u64, 0).saturating_mul(p as u64))
			// Standard Error: 49_589
			.saturating_add(Weight::from_parts(3_456_478_u64, 0).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(u as u64)))
	}
}
