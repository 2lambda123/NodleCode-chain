//! Autogenerated weights for `pallet_wnodl`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/nodle-chain
// benchmark
// --chain
// dev
// --pallet
// pallet_wnodl
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn initiate_wrapping() -> Weight;
	fn initiate_wrapping_reserve_fund() -> Weight;

	fn settle() -> Weight;
	fn settle_reserve_fund() -> Weight;

	fn reject() -> Weight;
	fn reject_reserve_fund(reason_length: u32) -> Weight;

	fn set_wrapping_limits() -> Weight;
}

/// Weight functions for `pallet_wnodl`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Wnodl WhitelistedCallers (r:1 w:0)
	// Storage: Wnodl CurrentMin (r:1 w:0)
	// Storage: Wnodl CurrentMax (r:1 w:0)
	// Storage: Wnodl TotalInitiated (r:1 w:1)
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn initiate_wrapping() -> Weight {
		(13_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Wnodl TotalInitiated (r:1 w:1)
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn initiate_wrapping_reserve_fund() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Wnodl WhitelistedCallers (r:1 w:0)
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: Wnodl TotalSettled (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn settle() -> Weight {
		(13_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: Wnodl TotalSettled (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn settle_reserve_fund() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Wnodl WhitelistedCallers (r:1 w:0)
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: Wnodl TotalRejected (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn reject() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Wnodl Balances (r:1 w:1)
	// Storage: Wnodl TotalRejected (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn reject_reserve_fund(_b: u32, ) -> Weight {
		(0 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Wnodl CurrentMin (r:0 w:1)
	// Storage: Wnodl CurrentMax (r:0 w:1)
	fn set_wrapping_limits() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn initiate_wrapping() -> Weight {
		(13_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn initiate_wrapping_reserve_fund() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn settle() -> Weight {
		(13_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn settle_reserve_fund() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn reject() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn reject_reserve_fund(_b: u32, ) -> Weight {
		(0 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn set_wrapping_limits() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}	
}
