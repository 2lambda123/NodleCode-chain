name: Test rust code

on: [push, pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain:
          - nightly-2021-11-01
        target: [ "wasm32-unknown-unknown" ]
    steps:
    - uses: actions/checkout@v2

    - name: Cache cargo registry
      uses: actions/cache@v2.1.6
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v2.1.6
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v2.1.6
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Install ubuntu native dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev

    - name: Cleanup ubuntu filesystem
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt clean
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true
        components: rustfmt, rustc-dev

    - name: Add target
      run: rustup target add ${{ matrix.target }}

    - name: Install Tarpaulin
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-tarpaulin --version 0.18.4

    - name: Generate coverage report
      uses: actions-rs/cargo@v1
      with:
        command: tarpaulin
        args: --verbose --all-features --workspace --timeout 120 --out Xml

    - name: Cargo check
      uses: actions-rs/cargo@v1
      env:
        SKIP_WASM_BUILD: ' '
      with:
        command: check
        args: --all-targets --all-features --workspace

    - name: Upload to Codecov
      uses: codecov/codecov-action@v2.0.3
      with:
        fail_ci_if_error: true

    # - name: Run tests
    #   run: SKIP_WASM_BUILD= cargo test --all-targets --all-features --workspace

  fmt:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup toolchain
      run: ./scripts/init.sh

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Run cargo fmt
      run: cargo fmt --all -- --check